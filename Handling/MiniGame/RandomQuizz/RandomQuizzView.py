import discord
from discord.ui import Button, View
from Handling.Economy.Profile import ProfileMongoManager
from CustomEnum.EmojiEnum import EmojiCreation2
import random
from Handling.Economy.Inventory_Shop.ItemClass import Item, list_gift_items
from typing import List
from Handling.Misc.UtilitiesFunctionsEconomy import UtilitiesFunctions
from Handling.Misc.SelfDestructView import SelfDestructView


class Quizz:
    def __init__(self, question: str, options: list, correct_answer: str):
        self.question = question
        self.options = options
        self.correct_answer = correct_answer

class RandomQuizzView(discord.ui.View):
    def __init__(self, quizz: Quizz):
        super().__init__(timeout=60)
        self.old_message: discord.Message = None
        self.opened = False
        self.quizz = quizz
        # ƒê·ªïi v·ªã tr√≠ l·ª±a ch·ªçn, v√† g·∫Øn v√†o ƒë√°p √°n A, B, C
        self.shuffled_answers = random.sample(quizz.options, len(quizz.options))
        self.option_mapping = {
            "A": self.shuffled_answers[0],
            "B": self.shuffled_answers[1],
            "C": self.shuffled_answers[2]
        }
        self.user_answered = []
        
        for key, value in self.option_mapping.items():
            self.add_item(QuizButton(label=key, custom_id=value, correct_answer=self.quizz.correct_answer, view=self))

    async def on_timeout(self):
        if self.opened == False:
            await self.old_message.delete()
    
class QuizButton(Button):
    def __init__(self, label:str, custom_id: str, correct_answer: str, view: "RandomQuizzView"):
        super().__init__(label=label, style=discord.ButtonStyle.primary, custom_id=custom_id)
        self.correct_answer = correct_answer
        self.parent_view = view

    async def callback(self, interaction: discord.Interaction):
        if self.parent_view.opened == True: return
        await interaction.response.defer(ephemeral=True)
        if interaction.user.id in self.parent_view.user_answered:
            await interaction.followup.send(f'{interaction.user.mention} M·ªói ng∆∞·ªùi ch·ªâ c√≥ m·ªôt l∆∞·ª£t ch·ªçn duy nh·∫•t th√¥i b·∫°n ∆°i', ephemeral=True)
            return
        self.parent_view.user_answered.append(interaction.user.id)
        chosen_answer = self.custom_id
        if chosen_answer == self.correct_answer:
            try:
                self.parent_view.opened = True
                await self.parent_view.old_message.delete()
                await interaction.followup.send(f"üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ tr·∫£ l·ªùi ch√≠nh x√°c!", ephemeral=True)
                channel = interaction.channel
                #random ph·∫ßn th∆∞·ªüng v√† th√¥ng b√°o k·∫øt qu·∫£
                #2% - tr·ª´ nh√¢n ph·∫©m. C√≤n l·∫°i gold 10%, silver 35%, exp 30%, dignity 35%, c√≤n l·∫°i s·∫Ω drop copper
                amount = random.randint(3500, 35000)
                emoji = EmojiCreation2.COPPER.value
                flag = False
                                
                gold_chance = UtilitiesFunctions.get_chance(10)
                if gold_chance and flag == False: 
                    emoji = EmojiCreation2.GOLD.value
                    amount = random.randint(10, 80)
                    ProfileMongoManager.update_profile_money(guild_id=interaction.guild_id, guild_name=interaction.guild.name, user_id=interaction.user.id, user_display_name=interaction.user.display_name, user_name=interaction.user.name, gold=amount)
                    flag = True
                    
                silver_chance = UtilitiesFunctions.get_chance(35)
                if silver_chance and flag == False: 
                    emoji = EmojiCreation2.SILVER.value
                    amount = random.randint(40, 200)
                    ProfileMongoManager.update_profile_money(guild_id=interaction.guild_id, guild_name=interaction.guild.name, user_id=interaction.user.id, user_display_name=interaction.user.display_name, user_name=interaction.user.name, silver=amount)
                    flag = True
                
                giftitem_chance = UtilitiesFunctions.get_chance(35)
                if giftitem_chance and flag == False:
                    amount = 1
                    random_item = random.choice(list_gift_items)
                    emoji = f"[{random_item.emoji} - **{random_item.item_name}**]"
                    flag = True
                    ProfileMongoManager.update_list_items_profile(guild_id=interaction.guild_id, guild_name=interaction.guild.name, user_id=interaction.user.id, user_display_name=interaction.user.display_name, user_name=interaction.user.name, item=random_item, amount=amount)
                
                exp_chance = UtilitiesFunctions.get_chance(35)
                if exp_chance and flag == False: 
                    emoji = "ƒêi·ªÉm Kinh Nghi·ªám"
                    amount = random.randint(20, 60)
                    flag = True
                    ProfileMongoManager.update_level_progressing(guild_id=interaction.guild_id, user_id=interaction.user.id, bonus_exp=amount)
                    
                    
                dignity_chance = UtilitiesFunctions.get_chance(35)
                if dignity_chance and flag == False: 
                    emoji = "Nh√¢n Ph·∫©m"
                    amount = random.randint(5, 50)
                    flag = True
                    ProfileMongoManager.update_dignity_point(guild_id=interaction.guild_id, guild_name=interaction.guild.name, user_id=interaction.user.id, user_display_name=interaction.user.display_name, user_name=interaction.user.name, dignity_point=amount)
                
                if flag == False:
                    #C·ªông copper
                    ProfileMongoManager.update_profile_money(guild_id=interaction.guild_id, guild_name=interaction.guild.name, user_id=interaction.user.id, user_display_name=interaction.user.display_name, user_name=interaction.user.name, copper=amount)
                
                embed = discord.Embed(title=f"", description=f"{EmojiCreation2.QUESTION_MARK.value} **H·ªèi Nhanh C√≥ Th∆∞·ªüng** {EmojiCreation2.QUESTION_MARK.value}", color=0x0ce7f2)
                embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
                embed.add_field(name=f"", value=f"**C√¢u h·ªèi**: {self.parent_view.quizz.question}", inline=False)
                for key, value in self.parent_view.option_mapping.items():
                    embed.add_field(name=f"", value=f"**{key}**. {value}", inline=False)
                embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
                embed.add_field(name=f"", value=f"ƒê√°p √°n ƒë√∫ng ch√≠nh l√† **{self.label}**! Ch√∫c m·ª´ng {interaction.user.mention} ƒë√£ tr·∫£ l·ªùi ƒë√∫ng v√† nh·∫≠n ƒë∆∞·ª£c:", inline=False)
                embed.add_field(name=f"", value=f"> {EmojiCreation2.GOLDEN_GIFT_BOX.value}: **{amount}** {emoji}", inline=False)
                embed.set_footer(text=f"H·ªèi Nhanh C√≥ Th∆∞·ªüng s·∫Ω xu·∫•t hi·ªán ng·∫´u nhi√™n, v√† khi th·∫•y th√¨ nh·ªõ tr·∫£ l·ªùi ƒë√∫ng nh√©!", icon_url=f"{EmojiCreation2.TRUE_HEAVEN_LINK_MINI.value}")
                view = SelfDestructView()
                m = await channel.send(embed=embed, view=view)
                view.message = m
            except Exception:
                return
        else:
            await interaction.followup.send(f'{interaction.user.mention} Th√¥i thua r·ªìi b·∫°n ∆°i, b·∫°n tr·∫£ l·ªùi sai v√† quay v√†o √¥ m·∫•t l∆∞·ª£t r·ªìi.', ephemeral=True)
            return

random_quizzes = [
            Quizz(
                question="Th·ªß ƒë√¥ c·ªßa Canada t√™n l√† g√¨?",
                options=["Ottawa", "Algonquin", "Vancouver"],
                correct_answer="Ottawa"
            ),
            Quizz(
                question="Th·ªß ƒë√¥ c·ªßa Th√°i Lan t√™n l√† g√¨?",
                options=["Bangkok", "Bangdik", "Bangpussy"],
                correct_answer="Bangkok"
            ),
            Quizz(
                question="Th·ªß ƒë√¥ c·ªßa Th√°i Lan vi·∫øt trong ti·∫øng Th√°i l√† g√¨?",
                options=["‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á"],
                correct_answer="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"
            ),
            Quizz(
                question="Di·ªán t√≠ch tr√°i ƒë·∫•t x·∫•p x·ªâ bao nhi√™u km2?",
                options=["510.000.000 km2", "513.000.000 km2", "519.000.000 km2"],
                correct_answer="510.000.000 km2"
            ),
            Quizz(
                question="H√¨nh n√≥n (N) c√≥ ƒë∆∞·ªùng sinh g·∫•p hai l·∫ßn b√°n k√≠nh ƒë√°y. G√≥c ·ªü ƒë·ªânh c·ªßa h√¨nh n√≥n l√† bao nhi√™u ƒë·ªô?",
                options=["120", "60", "45"],
                correct_answer="60"
            ),
            Quizz(
                question="Kim t·ª± th√°p K√™-·ªëp ·ªü Ai C·∫≠p ƒë∆∞·ª£c x√¢y d·ª±ng v√†o kho·∫£ng 2500 nƒÉm tr∆∞·ªõc c√¥ng nguy√™n, l√† m·ªôt h√¨nh ch√≥p t·ª© gi√°c ƒë·ªÅu c√≥ chi·ªÅu cao l√† 147m, c·∫°nh ƒë√°y d√†i 230m. T√≠nh th·ªÉ t√≠ch?",
                options=["7776300 m3", "2592100 m3", "1470000 m3"],
                correct_answer="2592100 m3"
            ),
            Quizz(
                question="2 con v·ªãt ƒëi tr∆∞·ªõc 2 con v·ªãt, 2 con v·ªãt ƒëi sau 2 con v·ªãt, 2 con v·ªãt ƒëi gi·ªØa 2 con v·ªãt. H·ªèi c√≥ m·∫•y con v·ªãt?",
                options=["4", "6", "8"],
                correct_answer="4"
            ),
            Quizz(
                question="Con s√¥ng d√†i nh·∫•t tr√™n th·∫ø gi·ªõi l√† g√¨?",
                options=["S√¥ng M√™k√¥ng", "S√¥ng Nile", "S√¥ng Amazon"],
                correct_answer="S√¥ng Nile"
            ),
            Quizz(
                question="L√† ai ƒë√£ v·∫Ω b·ª©c tranh n·ªïi ti·∫øng n√†ng Mona Lisa?",
                options=["Leonardo da Vinci", "Lenardo da Vinci", "Leonardo da Vini"],
                correct_answer="Leonardo da Vinci"
            ),
            Quizz(
                question="B√∫p b√™ Barbie t√™n ƒë·∫ßy ƒë·ªß l√† g√¨?",
                options=["Barbara Millicent Roberts", "Barbara Milicent Roberts", "Barbara Millicent Robert"],
                correct_answer="Barbara Millicent Roberts"
            ),
            Quizz(
                question="B√∫p b√™ Barbie t√™n ƒë·∫ßy ƒë·ªß l√† g√¨?",
                options=["Barbara Millicent Roberts", "Barbara Milicent Roberts", "Barbara Millicent Robert"],
                correct_answer="Barbara Millicent Roberts"
            ),
            Quizz(
                question="Con v·∫≠t n√†o d∆∞·ªõi ƒë√¢y kh√¥ng th·ªÉ b∆°i?",
                options=["C√°", "V·ªãt", "B√∫p b√™"],
                correct_answer="B√∫p b√™"
            ),
            Quizz(
                question="Ai ƒë√£ th·∫£ m·ªôt chi·∫øc b√∫a v√† m·ªôt chi·∫øc l√¥ng v≈© xu·ªëng M·∫∑t trƒÉng ƒë·ªÉ ch·ª©ng minh r·∫±ng khi kh√¥ng c√≥ kh√¥ng kh√≠, ch√∫ng s·∫Ω r∆°i v·ªõi t·ªëc ƒë·ªô nh∆∞ nhau?",
                options=["David Scott", "Apollo Scott", "David Apollo"],
                correct_answer="David Scott"
            ),
            Quizz(
                question="N·∫øu ta c√≥ th·ªÉ x·ª≠ l√Ω m·ªôt t·ª∑ nguy√™n t·ª≠ m·ªói gi√¢y, s·∫Ω m·∫•t bao l√¢u ƒë·ªÉ d·ªãch chuy·ªÉn t·ª©c th·ªùi m·ªôt con ng∆∞·ªùi?",
                options=["200 t·ª∑ nƒÉm", "200 tri·ªáu nƒÉm", "20 t·ª∑ nƒÉm"],
                correct_answer="200 t·ª∑ nƒÉm"
            ),
            Quizz(
                question="ƒê·∫•u tr∆∞·ªùng La M√£ n·∫±m ·ªü th√†nh ph·ªë n√†o?",
                options=["La M√£", "Rome", "√ù"],
                correct_answer="Rome"
            ),
            Quizz(
                question="ƒê·∫•u tr∆∞·ªùng La M√£ n·∫±m ·ªü ƒë·∫•t n∆∞·ªõc n√†o?",
                options=["La M√£", "Rome", "√ù"],
                correct_answer="√ù"
            ),
            Quizz(
                question="Stonehenge l√† m·ªôt c√¥ng tr√¨nh t∆∞·ª£ng ƒë√†i c·ª± th·∫°ch ·ªü ƒë√¢u?",
                options=["Ph√°p", "Anh", "√ù"],
                correct_answer="Anh"
            ),
            Quizz(
                question="Lo·∫°i n∆∞·ªõc gi·∫£i kh√°t n√†o ch·ª©a s·∫Øt v√† canxi?",
                options=["Cafe", "N∆∞·ªõc cam", "N∆∞·ªõc d·ª´a"],
                correct_answer="Cafe"
            ),
            Quizz(
                question="1 nƒÉm c√≥ bao nhi√™u th√°ng c√≥ ng√†y 28?",
                options=["1", "6", "12"],
                correct_answer="12"
            ),
            Quizz(
                question="Lo·∫°i r∆∞·ª£u n√†o ƒë·∫∑c tr∆∞ng c·ªßa m·ªôt s·ªë d√¢n t·ªôc m√† khi u·ªëng ph·∫£i d√πng c·∫ßn tre ho·∫∑c tr√∫c u·ªën cong ƒë·ªÉ h√∫t r∆∞·ª£u?",
                options=["R∆∞·ª£u ƒë·∫ø", "R∆∞·ª£u c·∫ßn", "R∆∞·ª£u b√†u ƒë√°"],
                correct_answer="R∆∞·ª£u c·∫ßn"
            ),
            Quizz(
                question="Maria Sharapova l√† v·∫≠n ƒë·ªông vi√™n n·ªïi ti·∫øng ·ªü m√¥n th·ªÉ thao n√†o?",
                options=["ƒêi·ªÅn kinh", "Qu·∫ßn v·ª£t", "B∆°i l·ªôi"],
                correct_answer="Qu·∫ßn v·ª£t"
            ),
            Quizz(
                question="Maria Sharapova l√† v·∫≠n ƒë·ªông vi√™n n·ªïi ti·∫øng ·ªü m√¥n th·ªÉ thao n√†o?",
                options=["ƒêi·ªÅn kinh", "Qu·∫ßn v·ª£t", "B∆°i l·ªôi"],
                correct_answer="Qu·∫ßn v·ª£t"
            ),
            Quizz(
                question="M·ªôt trong nh·ªØng qu·ªëc gia c√≥ vai tr√≤ quan tr·ªçng trong qu√° tr√¨nh h√¨nh th√†nh Li√™n h·ª£p qu·ªëc l√†?",
                options=["Li√™n X√¥", "Anh", "Ph√°p"],
                correct_answer="Li√™n X√¥"
            ),
            Quizz(
                question="Trong giai ƒëo·∫°n cu·ªëi c·ªßa Chi·∫øn tranh th·∫ø gi·ªõi th·ª© hai, m·ªôt trong nh·ªØng v·∫•n ƒë·ªÅ c·∫•p b√°ch ƒë·∫∑t ra l√†?",
                options=["Th√†nh l·∫≠p m·ªôt t·ªï ch·ª©c qu·ªëc t·∫ø nh·∫±m duy tr√¨ h√≤a b√¨nh v√† tr·∫≠t t·ª± th·∫ø gi·ªõi m·ªõi", "Th√†nh l·∫≠p m·ªôt li√™n minh gi·ªØa Li√™n X√¥ v√† Mƒ© ƒë·ªÉ thi·∫øt l·∫≠p tr·∫≠t t·ª± th·∫ø gi·ªõi m·ªõi sau chi·∫øn tranh", "Th√†nh l·∫≠p m·ªôt ·ªßy ban gi√∫p ƒë·ª° c√°c n∆∞·ªõc ph√°t x√≠t"],
                correct_answer="Th√†nh l·∫≠p m·ªôt t·ªï ch·ª©c qu·ªëc t·∫ø nh·∫±m duy tr√¨ h√≤a b√¨nh v√† tr·∫≠t t·ª± th·∫ø gi·ªõi m·ªõi"
            ),
            Quizz(
                question="V·ªã vua n√†o c√≥ nhi·ªÅu v·ª£ nh·∫•t nh∆∞ng l·∫°i kh√¥ng c√≥ ng∆∞·ªùi con n√†o?",
                options=["H√†m Nghi", "L√™ Th·∫ßn T√¥ng", "T·ª± ƒê·ª©c"],
                correct_answer="T·ª± ƒê·ª©c"
            ),
            Quizz(
                question="Ai l√† v·ªã tr·∫°ng nguy√™n tr·∫ª tu·ªïi nh·∫•t n∆∞·ªõc Nam?",
                options=["M·∫°c ƒêƒ©nh Chi", "Nguy·ªÖn B·ªânh Khi√™m", "Nguy·ªÖn Hi·ªÅn"],
                correct_answer="Nguy·ªÖn Hi·ªÅn"
            ),
            Quizz(
                question="VƒÉn mi·∫øu Qu·ªëc T·ª≠ Gi√°m, tr∆∞·ªùng ƒë·∫°i h·ªçc ƒë·∫ßu ti√™n c·ªßa Vi·ªát Nam ƒë∆∞·ª£c x√¢y d·ª±ng d∆∞·ªõi tri·ªÅu ƒë·∫°i n√†o?",
                options=["L√Ω", "Tr·∫ßn", "L√™"],
                correct_answer="L√Ω"
            ),
            Quizz(
                question="L·ªá Chi Vi√™n l√† khu v∆∞·ªùn tr·ªìng lo·∫°i c√¢y g√¨?",
                options=["T√°o", "V·∫£i", "Cam"],
                correct_answer="V·∫£i"
            ),
            Quizz(
                question="Ho√†ng ƒë·∫ø B·∫£o ƒê·∫°i t√™n th·∫≠t l√† g√¨?",
                options=["Nguy·ªÖn Ph√∫c Vƒ©nh Th·ª•y", "Nguy·ªÖn Ph√∫c B·∫£o Long", "Nguy·ªÖn Ph√∫c Vƒ©nh Th·ª•y"],
                correct_answer="Nguy·ªÖn Ph√∫c Vƒ©nh Th·ª•y"
            ),
        ]