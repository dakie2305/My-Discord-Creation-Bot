import discord
from Handling.Economy.Profile.ProfileClass import Profile
import Handling.Economy.Profile.ProfileMongoManager as ProfileMongoManager
from CustomEnum.SlashEnum import SlashCommand
from CustomEnum.EmojiEnum import EmojiCreation2
from typing import List, Optional, Dict
import Handling.Economy.GA.ListGAAndSkills as ListGAAndSkills
from Handling.Economy.GA.GuardianAngelClass import GuardianAngel, GuardianAngelSkill
from Handling.Misc.UtilitiesFunctionsEconomy import UtilitiesFunctions

SELECT_OPTIONS  = [
            discord.SelectOption(label=f'N√¢ng ch·ªâ s·ªë t·∫•n c√¥ng', value='attack', description='N√¢ng ch·ªâ s·ªë t·∫•n c√¥ng', emoji="ü¶æ", default=True),
            discord.SelectOption(label=f'N√¢ng m√°u', value='health', description='N√¢ng m√°u', emoji=discord.PartialEmoji(name="HP", id=1320777603358920724)),
            discord.SelectOption(label=f'N√¢ng th·ªÉ l·ª±c', value='stamina', description='N√¢ng th·ªÉ l·ª±c', emoji = discord.PartialEmoji(name="stamina", id=1320777620874592288)),
            discord.SelectOption(label=f'N√¢ng mana', value='mana', description='N√¢ng mana', emoji= discord.PartialEmoji(name="MP", id=1320777612926386256)),
        ]

class RankUpView(discord.ui.View):
    def __init__(self, user_profile: Profile, user: discord.Member):
        super().__init__(timeout=30)
        self.message : discord.Message = None
        self.user: discord.Member = user
        self.user_profile = user_profile
        self.selected_value: str = None

    async def on_timeout(self):
        #Delete
        if self.message != None: 
            await self.message.delete()
            return

    @discord.ui.select(placeholder='Ch·ªçn ch·ªâ s·ªë mu·ªën n√¢ng c·∫•p',min_values=1, max_values=1, options= SELECT_OPTIONS)
    async def select_callback(self, interaction: discord.Interaction, select: discord.ui.Select):
        await interaction.response.defer(ephemeral=True)
        if interaction.user.id != self.user.id:
            await interaction.followup.send(f'ƒê√¢y kh√¥ng ph·∫£i l√† ch·ªó ƒë·ªÉ b·∫°n ch·ªânh s·ª≠a', ephemeral=True)
            return
        selected_option = select.values[0]
        self.selected_value = selected_option
        if selected_option == "attack":
            await interaction.followup.send(f'B·∫°n ƒë√£ ch·ªçn n√¢ng c·∫•p ch·ªâ s·ªë t·∫•n c√¥ng ü¶æ', ephemeral=True)
        elif selected_option == "health":
            await interaction.followup.send(f'B·∫°n ƒë√£ ch·ªçn n√¢ng c·∫•p ch·ªâ s·ªë M√°u {EmojiCreation2.HP.value}', ephemeral=True)
        elif selected_option == "stamina":
            await interaction.followup.send(f'B·∫°n ƒë√£ ch·ªçn n√¢ng c·∫•p ch·ªâ s·ªë Th·ªÉ L·ª±c {EmojiCreation2.STAMINA.value}', ephemeral=True)
        elif selected_option == "mana":
            await interaction.followup.send(f'B·∫°n ƒë√£ ch·ªçn n√¢ng c·∫•p ch·ªâ s·ªë Mana {EmojiCreation2.MP.value}', ephemeral=True)
        return
    
    @discord.ui.button(label="üí± N√¢ng C·∫•p", style=discord.ButtonStyle.green)
    async def submit_button(self, interaction: discord.Interaction, button: discord.ui.Button):
            if interaction.user.id != self.user.id: return
            await interaction.response.send_modal(TextInputModal(selected_value= self.selected_value))


# Create a custom modal for text input
class TextInputModal(discord.ui.Modal):
    def __init__(self, selected_value):
        super().__init__(title="Nh·∫≠p s·ªë ƒëi·ªÉm m√† b·∫°n mu·ªën n√¢ng cho H·ªô V·ªá Th·∫ßn")
        self.selected_value = selected_value if selected_value else "attack"
        self.input_field = discord.ui.TextInput(
            label="Nh·∫≠p s·ªë ƒëi·ªÉm",
            placeholder="1",
            required=True,
            default = "1",
            max_length=2
        )
        self.add_item(self.input_field)
        
        
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=False)
        user_input = self.input_field.value
        try:
            amount = int(user_input)
            if amount <= 0:
                await interaction.followup.send(f"{interaction.user.mention} Vui l√≤ng nh·∫≠p gi√° tr·ªã l·ªõn h∆°n 0!", ephemeral=True)
                return
            user_profile = ProfileMongoManager.find_profile_by_id(guild_id=interaction.guild_id, user_id=interaction.user.id)
            if user_profile == None:
                await interaction.followup.send(f"{interaction.user.mention} Vui l√≤ng d√πng l·ªánh {SlashCommand.PROFILE.value} tr∆∞·ªõc ƒë√£!", ephemeral=True)
                return
            elif user_profile.guardian == None:
                await interaction.followup.send(f"{interaction.user.mention} Vui l√≤ng mua H·ªô V·ªá Th·∫ßn tr∆∞·ªõc b·∫±ng l·ªánh {SlashCommand.SHOP_GUARDIAN.value} ƒë√£!", ephemeral=True)
                return
            elif user_profile.guardian.stats_point == 0:
                await interaction.followup.send(f"{interaction.user.mention} H·ªô V·ªá Th·∫ßn c·ªßa b·∫°n kh√¥ng c√≤n ƒëi·ªÉm c·ªông n√†o h·∫øt!", ephemeral=True)
                return
            
            
            amount = int(user_input)
            point = 5
            if self.selected_value == "attack": point = 10
            
            if amount > user_profile.guardian.stats_point: amount = user_profile.guardian.stats_point
            point = point*amount
            
            #D·ª±a v√†o selected_value ƒë·ªÉ x√°c ƒë·ªãnh n√™n n√¢ng c√°i g√¨
            text = f"Th·ªÉ L·ª±c {EmojiCreation2.STAMINA.value}"
            if self.selected_value == "attack":
                ProfileMongoManager.update_guardian_stats(guild_id=interaction.guild_id,user_id=interaction.user.id, attack_power=point)
                text = f"S·ª©c T·∫•n C√¥ng ü¶æ"
            elif self.selected_value == "health":
                ProfileMongoManager.update_guardian_stats(guild_id=interaction.guild_id,user_id=interaction.user.id, max_health=point, health= user_profile.guardian.max_health+point)
                text = f"M√°u {EmojiCreation2.HP.value}"
            elif self.selected_value == "mana":
                ProfileMongoManager.update_guardian_stats(guild_id=interaction.guild_id,user_id=interaction.user.id, max_mana=point, mana= user_profile.guardian.max_mana+point)
                text = f"Mana {EmojiCreation2.MP.value}"
            else:
                ProfileMongoManager.update_guardian_stats(guild_id=interaction.guild_id,user_id=interaction.user.id, max_stamina=point, stamina= user_profile.guardian.max_stamina+point)
            #Tr·ª´ ƒëi·ªÉm stats point
            ProfileMongoManager.set_guardian_stats_points(guild_id=interaction.guild_id,user_id=interaction.user.id, stats_point=-amount)
            await interaction.followup.send(f"{interaction.user.mention} ƒë√£ d√πng **{amount}** ƒëi·ªÉm n√¢ng c·∫•p ƒë·ªÉ n√¢ng **{point}** ch·ªâ s·ªë {text} cho H·ªô V·ªá Th·∫ßn c·ªßa b·∫£n th√¢n!", ephemeral=False)
        except ValueError:
            await interaction.followup.send(f"Ch·ªâ nh·∫≠p s·ªë h·ª£p l·ªá!", ephemeral=True)
            return
        