
import discord
from Handling.Economy.Profile.ProfileClass import Profile
import Handling.Economy.Profile.ProfileMongoManager as ProfileMongoManager
from CustomEnum.SlashEnum import SlashCommand
from CustomEnum.EmojiEnum import EmojiCreation2
from typing import List, Optional, Dict
import Handling.Economy.GA.ListGAAndSkills as ListGAAndSkills
from Handling.Economy.GA.GuardianAngelClass import GuardianAngel, GuardianAngelSkill
from Handling.Economy.GA.GuardianAngelAttackClass import GuardianAngelAttackClass
from Handling.Misc.UtilitiesFunctionsEconomy import UtilitiesFunctions
import random
import asyncio
from datetime import datetime, timedelta
from Handling.Misc.SelfDestructView import SelfDestructView


class GaBattleView(discord.ui.View):
    def __init__(self, user_profile: Profile, user: discord.Member,enemy_ga: GuardianAngel, guild_id: int, is_players_versus_players: bool, target_profile: Profile = None, target: discord.Member = None, allowed_multiple_players: bool = False, max_players:int = 1, embed_title: str = "", gold_reward: int = 0, silver_reward: int= 0, dignity_point: int = 10, bonus_exp: int = 200):
        super().__init__(timeout=180)
        self.message : discord.Message = None
        self.user: discord.Member = user
        self.target: discord.Member = target
        self.user_profile = user_profile
        self.target_profile = target_profile
        self.enemy_ga = enemy_ga
        self.allowed_multiple_players = allowed_multiple_players
        self.max_players = max_players
        self.is_players_versus_players = is_players_versus_players
        
        self.upper_attack_class: List['GuardianAngelAttackClass'] = []
        self.lower_attack_class: List['GuardianAngelAttackClass'] = []
        
        self.round_number_text_report = {}
        self.round = 1
        self.text = ""
        self.embed_title = embed_title
        self.joined_player_id : List[int]= []
        
        self.upper_attack_won = False
        self.dignity_point = dignity_point
        self.gold_reward = gold_reward
        self.silver_reward = silver_reward
        self.bonus_exp = bonus_exp
        
        self.guild_id = guild_id
        
        self.battle_ended = False
        
        first_player_class = GuardianAngelAttackClass(player_profile=user_profile, player_ga=user_profile.guardian)
        self.upper_attack_class.append(first_player_class)
        
        if is_players_versus_players:
            self.joined_allied_button = discord.ui.Button(label="Gia Nh·∫≠p Phe Tr√™n", style=discord.ButtonStyle.primary)
            self.joined_allied_button.callback = self.joined_allied_button_event
            self.add_item(self.joined_allied_button)
            
            self.joined_target_button = discord.ui.Button(label="Gia Nh·∫≠p Phe D∆∞·ªõi", style=discord.ButtonStyle.red)
            self.joined_target_button.callback = self.joined_target_button_event
            self.add_item(self.joined_target_button)
            
            second_player_class = GuardianAngelAttackClass(player_profile=target_profile, player_ga=target_profile.guardian)
            self.lower_attack_class.append(second_player_class)
            self.joined_player_id.append(user.id)
            self.joined_player_id.append(target.id)
            
        else:
            self.joined_fight_button = discord.ui.Button(label="‚öîÔ∏è Chi·∫øn ƒê·∫•u", style=discord.ButtonStyle.green)
            self.joined_fight_button.callback = self.joined_the_fight_button_event
            self.add_item(self.joined_fight_button)
            
            second_player_class = GuardianAngelAttackClass(player_ga=enemy_ga)
            self.lower_attack_class.append(second_player_class)
            self.joined_player_id.append(user.id)
        
            
    async def on_timeout(self):
        #Delete
        if self.message != None and self.battle_ended == False: 
            await self.message.edit(view= None)
            return

        #region button event
    async def joined_allied_button_event(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        if len(self.upper_attack_class) >= self.max_players:
            await interaction.followup.send(f'Phe tr√™n ƒë√£ ƒë·ªß ng∆∞·ªùi!', ephemeral=True)
            return
        if interaction.user.id in self.joined_player_id:
            await interaction.followup.send(f'B·∫°n ƒë√£ tham gia tr·∫≠n chi·∫øn n√†y r·ªìi!', ephemeral=True)
            return
        #L·∫•y d·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng v√† add v√†o attack_class
        new_player_profile = ProfileMongoManager.find_profile_by_id(guild_id=interaction.guild_id, user_id=interaction.user.id)
        if new_player_profile == None:
            await interaction.followup.send(content=f"Vui l√≤ng d√πng l·ªánh {SlashCommand.PROFILE.value} tr∆∞·ªõc ƒë√£!", ephemeral=True)
            return
        elif new_player_profile.guardian == None:
            await interaction.followup.send(content=f"Vui l√≤ng mua H·ªô V·ªá Th·∫ßn tr∆∞·ªõc b·∫±ng l·ªánh {SlashCommand.SHOP_GUARDIAN.value} ƒë√£!", ephemeral=True)
            return
        
        if new_player_profile.guardian.last_joined_battle != None:
            time_window = timedelta(minutes=1)
            check = UtilitiesFunctions.check_if_within_time_delta(input=new_player_profile.guardian.last_joined_battle, time_window=time_window)
            if check:
                next_time = new_player_profile.guardian.last_joined_battle + time_window
                unix_time = int(next_time.timestamp())
                embed = discord.Embed(title=f"", description=f"üö´ {interaction.user.mention} B·∫°n v·ª´a tham chi·∫øn xong. Vui l√≤ng ƒë·ª£i m·ªôt ph√∫t r·ªìi th·ª±c hi·ªán l·∫°i l·ªánh!", color=0xc379e0)
                view = SelfDestructView(timeout=30)
                mess = await interaction.followup.send(embed=embed, view=view, ephemeral=False)
                view.message = mess
                return

        if new_player_profile.guardian.time_to_recover!= None:
            if new_player_profile.guardian.time_to_recover > datetime.now():
                next_time = new_player_profile.guardian.time_to_recover
                unix_time = int(next_time.timestamp())
                await interaction.followup.send(content=f"H·ªô V·ªá Th·∫ßn c·ªßa b·∫°n ƒëang b·ªã th∆∞∆°ng! Vui l√≤ng ch·ªù h·ªìi ph·ª•c v√†o l√∫c <t:{unix_time}:t> ho·∫∑c mua b√¨nh h·ªìi ph·ª•c trong {SlashCommand.SHOP_GLOBAL.value}!", ephemeral=True)
                return
            else:
                #H·ªìi ph·ª•c 50% m√°u, 50% th·ªÉ l·ª±c
                health = int(new_player_profile.guardian.max_health*50/100)
                stamina = int(new_player_profile.guardian.max_stamina*50/100)
                ProfileMongoManager.update_guardian_stats(guild_id=interaction.guild_id,user_id=interaction.user.id, health=health, stamina=stamina)
        
        #ƒê√°nh giao h·ªØu th√¨ 100% h·∫øt stats
        new_player_profile.guardian.health = new_player_profile.guardian.max_health
        new_player_profile.guardian.mana = new_player_profile.guardian.max_mana
        new_player_profile.guardian.stamina = new_player_profile.guardian.max_stamina
        
        data = GuardianAngelAttackClass(player_profile=new_player_profile, player_ga=new_player_profile.guardian, starting_at_round=self.round)
        self.upper_attack_class.append(data)
        self.joined_player_id.append(interaction.user.id)
        ProfileMongoManager.update_main_guardian_profile_time(guild_id=interaction.guild_id,user_id=interaction.user.id, data_type="last_joined_battle", date_value=datetime.now())
        await interaction.followup.send(content=f"B·∫°n ƒë√£ gia nh·∫≠p phe tr√™n v√†o l∆∞·ª£t th·ª© {self.round}!", ephemeral=True)
        return
    
    async def joined_target_button_event(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        if len(self.lower_attack_class) >= self.max_players:
            await interaction.followup.send(f'Phe d∆∞·ªõi ƒë√£ ƒë·ªß ng∆∞·ªùi!', ephemeral=True)
            return
        
        if interaction.user.id in self.joined_player_id:
            await interaction.followup.send(f'B·∫°n ƒë√£ tham gia tr·∫≠n chi·∫øn n√†y r·ªìi!', ephemeral=True)
            return
        #L·∫•y d·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng v√† add v√†o attack_class
        new_player_profile = ProfileMongoManager.find_profile_by_id(guild_id=interaction.guild_id, user_id=interaction.user.id)
        if new_player_profile == None:
            await interaction.followup.send(content=f"Vui l√≤ng d√πng l·ªánh {SlashCommand.PROFILE.value} tr∆∞·ªõc ƒë√£!", ephemeral=True)
            return
        elif new_player_profile.guardian == None:
            await interaction.followup.send(content=f"Vui l√≤ng mua H·ªô V·ªá Th·∫ßn tr∆∞·ªõc b·∫±ng l·ªánh {SlashCommand.SHOP_GUARDIAN.value} ƒë√£!", ephemeral=True)
            return
        
        if new_player_profile.guardian.last_joined_battle != None:
            time_window = timedelta(minutes=1)
            check = UtilitiesFunctions.check_if_within_time_delta(input=new_player_profile.guardian.last_joined_battle, time_window=time_window)
            if check:
                next_time = new_player_profile.guardian.last_joined_battle + time_window
                unix_time = int(next_time.timestamp())
                embed = discord.Embed(title=f"", description=f"üö´ {interaction.user.mention} B·∫°n v·ª´a tham chi·∫øn xong. Vui l√≤ng ƒë·ª£i m·ªôt ph√∫t r·ªìi th·ª±c hi·ªán l·∫°i l·ªánh!", color=0xc379e0)
                view = SelfDestructView(timeout=30)
                mess = await interaction.followup.send(embed=embed, view=view, ephemeral=False)
                view.message = mess
                return

        if new_player_profile.guardian.time_to_recover!= None:
            if new_player_profile.guardian.time_to_recover > datetime.now():
                next_time = new_player_profile.guardian.time_to_recover
                unix_time = int(next_time.timestamp())
                await interaction.followup.send(content=f"H·ªô V·ªá Th·∫ßn c·ªßa b·∫°n ƒëang b·ªã th∆∞∆°ng! Vui l√≤ng ch·ªù h·ªìi ph·ª•c v√†o l√∫c <t:{unix_time}:t> ho·∫∑c mua b√¨nh h·ªìi ph·ª•c trong {SlashCommand.SHOP_GLOBAL.value}!", ephemeral=True)
                return
            else:
                #H·ªìi ph·ª•c 50% m√°u, 50% th·ªÉ l·ª±c
                health = int(new_player_profile.guardian.max_health*50/100)
                stamina = int(new_player_profile.guardian.max_stamina*50/100)
                ProfileMongoManager.update_guardian_stats(guild_id=interaction.guild_id,user_id=interaction.user.id, health=health, stamina=stamina)
        
        #ƒê√°nh giao h·ªØu th√¨ 100% h·∫øt stats
        new_player_profile.guardian.health = new_player_profile.guardian.max_health
        new_player_profile.guardian.mana = new_player_profile.guardian.max_mana
        new_player_profile.guardian.stamina = new_player_profile.guardian.max_stamina
        
        data = GuardianAngelAttackClass(player_profile=new_player_profile, player_ga=new_player_profile.guardian, starting_at_round=self.round)
        self.lower_attack_class.append(data)
        self.joined_player_id.append(interaction.user.id)
        ProfileMongoManager.update_main_guardian_profile_time(guild_id=interaction.guild_id,user_id=interaction.user.id, data_type="last_joined_battle", date_value=datetime.now())
        await interaction.followup.send(content=f"B·∫°n ƒë√£ gia nh·∫≠p phe d∆∞·ªõi, v√†o l∆∞·ª£t th·ª© {self.round}!", ephemeral=True)
        return


    async def joined_the_fight_button_event(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        if len(self.upper_attack_class) >= self.max_players:
            await interaction.followup.send(f'Kh√¥ng c√≤n ch·ªó tr·ªëng cho b·∫°n tham gia tr·∫≠n chi·∫øn n√†y', ephemeral=True)
            return
        
        if interaction.user.id in self.joined_player_id:
            await interaction.followup.send(f'B·∫°n ƒë√£ tham gia tr·∫≠n chi·∫øn n√†y r·ªìi!', ephemeral=True)
            return
        #L·∫•y d·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng v√† add v√†o attack_class
        new_player_profile = ProfileMongoManager.find_profile_by_id(guild_id=interaction.guild_id, user_id=interaction.user.id)
        if new_player_profile == None:
            await interaction.followup.send(content=f"Vui l√≤ng d√πng l·ªánh {SlashCommand.PROFILE.value} tr∆∞·ªõc ƒë√£!", ephemeral=True)
            return
        elif new_player_profile.guardian == None:
            await interaction.followup.send(content=f"Vui l√≤ng mua H·ªô V·ªá Th·∫ßn tr∆∞·ªõc b·∫±ng l·ªánh {SlashCommand.SHOP_GUARDIAN.value} ƒë√£!", ephemeral=True)
            return
        
        if new_player_profile.guardian.last_joined_battle != None:
            time_window = timedelta(minutes=1)
            check = UtilitiesFunctions.check_if_within_time_delta(input=new_player_profile.guardian.last_joined_battle, time_window=time_window)
            if check:
                next_time = new_player_profile.guardian.last_joined_battle + time_window
                unix_time = int(next_time.timestamp())
                embed = discord.Embed(title=f"", description=f"üö´ {interaction.user.mention} B·∫°n v·ª´a tham chi·∫øn xong. Vui l√≤ng ƒë·ª£i m·ªôt ph√∫t r·ªìi th·ª±c hi·ªán l·∫°i l·ªánh!", color=0xc379e0)
                view = SelfDestructView(timeout=60)
                mess = await interaction.followup.send(embed=embed, view=view, ephemeral=False)
                view.message = mess
                return
        
        if new_player_profile.guardian.time_to_recover!= None:
            if new_player_profile.guardian.time_to_recover > datetime.now():
                next_time = new_player_profile.guardian.time_to_recover
                unix_time = int(next_time.timestamp())
                await interaction.followup.send(content=f"H·ªô V·ªá Th·∫ßn c·ªßa b·∫°n ƒëang b·ªã th∆∞∆°ng! Vui l√≤ng ch·ªù h·ªìi ph·ª•c v√†o l√∫c <t:{unix_time}:t> ho·∫∑c mua b√¨nh h·ªìi ph·ª•c trong {SlashCommand.SHOP_GLOBAL.value}!", ephemeral=True)
                return
            else:
                #H·ªìi ph·ª•c 50% m√°u, 50% th·ªÉ l·ª±c
                health = int(new_player_profile.guardian.max_health*50/100)
                stamina = int(new_player_profile.guardian.max_stamina*50/100)
                ProfileMongoManager.update_guardian_stats(guild_id=interaction.guild_id,user_id=interaction.user.id, health=health, stamina=stamina)
        
        data = GuardianAngelAttackClass(player_profile=new_player_profile, player_ga=new_player_profile.guardian, starting_at_round=self.round)
        self.upper_attack_class.append(data)
        self.joined_player_id.append(interaction.user.id)
        await interaction.followup.send(content=f"B·∫°n ƒë√£ gia nh·∫≠p chi·∫øn ƒë·∫•u v√†o l∆∞·ª£t th·ª© {self.round}!", ephemeral=True)
        ProfileMongoManager.update_main_guardian_profile_time(guild_id=interaction.guild_id,user_id=interaction.user.id, data_type="last_joined_battle", date_value=datetime.now())
        return

    #region battle event
    async def commence_battle(self):
        if len(self.upper_attack_class) == 0 or len(self.lower_attack_class) == 0: return
        await asyncio.sleep(3)
        
        #upper attack s·∫Ω ƒë√°nh tr∆∞·ªõc
        flag_end_battle = False
        full_text = ""
        for self_player_info in self.upper_attack_class:
            #Skip qua guardian ƒë√£ ch·∫øt
            if self_player_info.player_ga.health <= 0: continue
            #M·ªói guardian trong upper s·∫Ω ch·ªçn ng·∫´u nhi√™n m·ªôt lower ƒë·ªÉ ƒë√°nh
            opponent_alive_attack_info = self.get_ga_stil_alive("lower")
            if opponent_alive_attack_info == None:
                #phe d∆∞·ªõi ƒë√£ thua, k·∫øt th√∫c tr·∫≠n chi·∫øn
                flag_end_battle = True
                self.upper_attack_won = True
                continue
                
            base_text = self.execute_attack(self_player_info = self_player_info, opponent_alive_attack_info = opponent_alive_attack_info)
            full_text += base_text + "\n"
            
        #t·ªõi l∆∞·ª£t c·ªßa phe lower
        for self_player_info in self.lower_attack_class:
            #Skip qua guardian ƒë√£ ch·∫øt
            if self_player_info.player_ga.health <= 0: continue
            
            #M·ªói guardian trong lower s·∫Ω ch·ªçn ng·∫´u nhi√™n m·ªôt upper ƒë·ªÉ ƒë√°nh
            opponent_alive_attack_info = self.get_ga_stil_alive("upper")
            if opponent_alive_attack_info == None:
                #phe tr√™n ƒë√£ thua, k·∫øt th√∫c tr·∫≠n chi·∫øn
                flag_end_battle = True
                self.upper_attack_won = False
                continue
            base_text = self.execute_attack(self_player_info = self_player_info, opponent_alive_attack_info = opponent_alive_attack_info)
            full_text += base_text + "\n"
        
        if not self.is_empty_or_whitespace(full_text):
            self.round_number_text_report.update({self.round: full_text.strip()})
        
        #C·∫≠p nh·∫≠t embed chi·∫øn ƒë·∫•u
        embed = discord.Embed(title=f"", description=self.embed_title, color=0x0ce7f2)
        for self_player_info in self.upper_attack_class:
            text_own_profile_exist = f"{self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}** (C·∫•p {self_player_info.player_ga.level})"
            if self_player_info.player_profile != None:
                text_own_profile_exist = f"H·ªô V·ªá Th·∫ßn {self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}** (C·∫•p {self_player_info.player_ga.level}) c·ªßa <@{self_player_info.player_profile.user_id}>"
            embed.add_field(name=f"", value=text_own_profile_exist, inline=False)
            embed.add_field(name=f"", value=f"ü¶æ: **{self_player_info.player_ga.attack_power}**\n{UtilitiesFunctions.progress_bar_stat(input_value=self_player_info.player_ga.health, max_value=self_player_info.player_ga.max_health, emoji=EmojiCreation2.HP.value)}\n{UtilitiesFunctions.progress_bar_stat(input_value=self_player_info.player_ga.stamina, max_value=self_player_info.player_ga.max_stamina, emoji=EmojiCreation2.STAMINA.value)}\n{UtilitiesFunctions.progress_bar_stat(input_value=self_player_info.player_ga.mana, max_value=self_player_info.player_ga.max_mana, emoji=EmojiCreation2.MP.value)}", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        for self_player_info in self.lower_attack_class:
            text_target_profile_exist = f"K·∫ª Th√π {self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}** (C·∫•p {self_player_info.player_ga.level})"
            if self_player_info.player_profile != None:
                text_target_profile_exist = f"H·ªô V·ªá Th·∫ßn {self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}** (C·∫•p {self_player_info.player_ga.level}) c·ªßa <@{self_player_info.player_profile.user_id}>"
            embed.add_field(name=f"", value=text_target_profile_exist, inline=False)
            embed.add_field(name=f"", value=f"ü¶æ: **{self_player_info.player_ga.attack_power}**\n{UtilitiesFunctions.progress_bar_stat(input_value=self_player_info.player_ga.health, max_value=self_player_info.player_ga.max_health, emoji=EmojiCreation2.HP.value)}\n{UtilitiesFunctions.progress_bar_stat(input_value=self_player_info.player_ga.stamina, max_value=self_player_info.player_ga.max_stamina, emoji=EmojiCreation2.STAMINA.value)}\n{UtilitiesFunctions.progress_bar_stat(input_value=self_player_info.player_ga.mana, max_value=self_player_info.player_ga.max_mana, emoji=EmojiCreation2.MP.value)}", inline=False)
        
        formatted_string = "\n".join(f"L∆∞·ª£t th·ª© **{key}**.\n{value}\n" for key, value in self.round_number_text_report.items())
        # await self.message.edit(embed=embed, content=f"L∆∞·ª£t th·ª© **{self.round}**")
        try:
            await self.message.edit(embed=embed, content=formatted_string)
        except Exception as e:
            await self.message.edit(embed=embed, content=f"L∆∞·ª£t th·ª© **{self.round}**")
        if flag_end_battle: await self.end_battle()
        else:
            max_limit = 2
            if len(self.upper_attack_class) > 3 or len(self.lower_attack_class) > 3: max_limit = 1
            if self.round > max_limit:
                #B·ªè ƒëi round ƒë·∫ßu ƒë·ªÉ ti·∫øp ki·ªám ch·ªó
                first_key = list(self.round_number_text_report.keys())[0]
                del self.round_number_text_report[first_key]
            self.round += 1
            await self.commence_battle()
        return
    
    async def end_battle(self):
        print(f"Username {self.user_profile.user_name} has ended guardian battle in guild {self.user_profile.guild_name}!")
        #T√≠nh to√°n k·∫øt qu·∫£
        self.battle_ended = True
        result_text = "**T·ªïng K·∫øt Chi·∫øn ƒê·∫•u**\n"
        if self.upper_attack_won:
            result_text += f"Phe tr√™n ƒë√£ chi·∫øn th·∫Øng!\n‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê>\n"
            for info in self.upper_attack_class:
                additional_stats = self.get_result_addition_stats(info)
                result_text += additional_stats
        else:
            result_text += f"Phe d∆∞·ªõi ƒë√£ chi·∫øn th·∫Øng!\n"
            for info in self.lower_attack_class:
                additional_stats = self.get_result_addition_stats(info)
                result_text += additional_stats
        result_text += f"‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê>\nPhe thua qu√° g√†, ch·∫≥ng x·ª©ng ƒë√°ng nh·∫≠n g√¨ h·∫øt!"
        try:
            await self.message.reply(content=result_text)
            await self.message.edit(view=None)
        except Exception as e:
            print(e)
        #C·∫≠p nh·∫≠t stats cho guardian n·∫øu c√≥ profile v√† ƒëang l√† PVE
        if self.is_players_versus_players == False:
            for info in self.upper_attack_class:
                if info.player_profile != None:
                    self.update_stats_in_database(info)
            for info in self.lower_attack_class:
                if info.player_profile != None:
                    self.update_stats_in_database(info)
        return
    
    
    def calculate_contribution(self, entry_turn):
        if entry_turn > self.round:
            return 0
        turns_participated = self.round - entry_turn + 1
        contribution_percentage = int(turns_participated / self.round * 100) 
        return contribution_percentage
    
    def is_empty_or_whitespace(self, s: str):
        return not s.strip()
    
    def get_result_addition_stats(self, info: GuardianAngelAttackClass):
        if info.player_profile == None: return ""
        #Nh√¢n theo l∆∞·ª£ng ng∆∞·ªùi tham gia
        bonus_exp = int(self.bonus_exp * len(self.upper_attack_class) + self.bonus_exp*len(self.lower_attack_class))
        gold_reward = int(self.gold_reward * len(self.upper_attack_class) + self.bonus_exp*len(self.lower_attack_class))
        silver_reward = int(self.silver_reward * len(self.upper_attack_class) + self.bonus_exp*len(self.lower_attack_class))
        contribution = self.calculate_contribution(info.starting_at_round)
        text_target_profile_exist = f"<@{info.player_profile.user_id}> [{info.starting_at_round}] c·ªëng hi·∫øn **{contribution}%**, nh·∫≠n: "
        calculated_exp = int(bonus_exp * (contribution / 100))
        if calculated_exp > 0: 
            if calculated_exp > 350: calculated_exp = 350
            text_target_profile_exist += f"**{calculated_exp}** EXP. "
            ProfileMongoManager.update_level_progressing(guild_id=self.guild_id, user_id=info.player_profile.user_id, bonus_exp=int(calculated_exp*0.3))
            ProfileMongoManager.update_main_guardian_level_progressing(guild_id=self.guild_id, user_id=info.player_profile.user_id, bonus_exp=calculated_exp)
        
        calculated_gold_reward = int(gold_reward * (contribution / 100))
        if calculated_gold_reward > 0:
            text_target_profile_exist += f"**{calculated_gold_reward}** {EmojiCreation2.GOLD.value}. "
        
        calculated_silver_reward = int(silver_reward * (contribution / 100))
        if calculated_silver_reward > 0:
            text_target_profile_exist += f"**{calculated_silver_reward}** {EmojiCreation2.SILVER.value}. "
        
        ProfileMongoManager.update_profile_money(guild_id=self.guild_id, user_id=info.player_profile.user_id, guild_name="",user_display_name="", user_name="", gold=calculated_gold_reward, silver=calculated_silver_reward)
        
        if self.dignity_point > 0:
            text_target_profile_exist += f"**{self.dignity_point}** Nh√¢n ph·∫©m. "
            ProfileMongoManager.update_dignity_point(guild_id=self.guild_id, user_id=info.player_profile.user_id, guild_name="",user_display_name="", user_name="", dignity_point=self.dignity_point)
        text_target_profile_exist += "\n"
        return text_target_profile_exist
    
    
    def update_stats_in_database(self, info: GuardianAngelAttackClass):
        if info.player_profile != None:
            # loss_health = int(info.player_ga.max_health - info.player_ga.health)
            # loss_stamina = int(info.player_ga.max_stamina - info.player_ga.stamina)
            # loss_mana = int(info.player_ga.max_mana - info.player_ga.mana)
            ProfileMongoManager.set_guardian_current_stats(guild_id=self.guild_id, user_id=info.player_profile.user_id,stamina=info.player_ga.stamina, health=info.player_ga.health, mana=info.player_ga.mana)
    
    def get_ga_stil_alive(self, side: str):
        if side == "upper":
            legit_attack_classes = [attack_class for attack_class in self.upper_attack_class if attack_class.player_ga.health > 0]
            if len(legit_attack_classes) == 0: return None
            return random.choice(legit_attack_classes)
        else:
            legit_attack_classes = [attack_class for attack_class in self.lower_attack_class if attack_class.player_ga.health > 0]
            if len(legit_attack_classes) == 0: return None
            return random.choice(legit_attack_classes)

    def execute_attack(self, self_player_info: GuardianAngelAttackClass, opponent_alive_attack_info: GuardianAngelAttackClass):
        health_potion = None
        stamina_potion = None
        mana_potion = None
        #Ch·ªâ ƒë·ªÉ check xem profile c·ªßa ƒë·ªëi th·ªß c√≥ hay kh√¥ng
        text_target_profile_exist = ""
        if opponent_alive_attack_info.player_profile != None:
            text_target_profile_exist = f"c·ªßa <@{opponent_alive_attack_info.player_profile.user_id}>"
        #Ch·ªâ ƒë·ªÉ check xem profile c·ªßa b·∫£n th√¢n c√≥ hay kh√¥ng
        text_own_profile_exist = ""
        if self_player_info.player_profile != None:
            text_own_profile_exist = f"c·ªßa <@{self_player_info.player_profile.user_id}>"
        
        #L·ªçc qua inventory c·ªßa profile ƒë·ªÉ xem c√≥ b√¨nh m√°u kh√¥ng
        if self_player_info.player_profile != None and self_player_info.player_profile.list_items != None and len(self_player_info.player_profile.list_items) > 0:
            for item in self_player_info.player_profile.list_items:
                if item.item_id == "ga_heal_1":
                    health_potion = item
                if item.item_id == "ga_stamina_1":
                    stamina_potion = item
                if item.item_id == "ga_mana_1":
                    mana_potion = item
        
        #T√≠nh t·ªâ l·ªá h·ªìi m√°u n·∫øu m√°u √≠t h∆°n 45% v√† ph·∫£i c√≥ b√¨nh m√°u trong kho ƒë·ªì
        if self_player_info.player_profile != None and self_player_info.player_ga.health < self_player_info.player_ga.max_health*0.45 and health_potion != None:
            #roll chance 40% d√πng b√¨nh m√°u n·∫øu c√≥ trong inventory c·ªßa profile
            use_chance = UtilitiesFunctions.get_chance(40)
            if use_chance:
                #Tu·ª≥ lo·∫°i b√¨nh m√°u m√† h·ªìi theo ph·∫ßn trƒÉm m√°u, m·∫∑c ƒë·ªãnh 30%
                percent_restored= 0.3
                
                heal_amount = int(self_player_info.player_ga.max_health * percent_restored)
                self_player_info.player_ga.health += heal_amount
                if self_player_info.player_ga.health > self_player_info.player_ga.max_health: self_player_info.player_ga.health = self_player_info.player_ga.max_health
                
                base_text = f"- [{self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ s·ª≠ d·ª•ng **{health_potion.item_name}** ƒë·ªÉ h·ªìi **{heal_amount}** M√°u!"
                
                self_player_info.recovery_time += 1
                #X√≥a item kh·ªèi inventory
                ProfileMongoManager.update_list_items_profile(guild_id=self.guild_id, user_id=self_player_info.player_profile.user_id, user_name="", guild_name="",user_display_name="", item = health_potion, amount=-1)
                try:
                    self_player_info.player_profile.list_items.remove(health_potion)
                except Exception as e: print()
                return base_text
        
        #T√≠nh t·ªâ l·ªá h·ªìi th·ªÉ l·ª±c n·∫øu th·ªÉ l·ª±c √≠t h∆°n 30% v√† ph·∫£i c√≥ b√¨nh stamina trong kho ƒë·ªì
        if self_player_info.player_profile != None and self_player_info.player_ga.stamina < self_player_info.player_ga.max_stamina*0.30 and stamina_potion != None:
            #roll chance 40% d√πng b√¨nh n·∫øu c√≥ trong inventory c·ªßa profile
            use_chance = UtilitiesFunctions.get_chance(40)
            if use_chance:
                #Tu·ª≥ lo·∫°i b√¨nh m√† h·ªìi theo ph·∫ßn trƒÉm, m·∫∑c ƒë·ªãnh 50%
                percent_restored= 0.5
                
                heal_amount = int(self_player_info.player_ga.max_stamina * percent_restored)
                self_player_info.player_ga.stamina += heal_amount
                if self_player_info.player_ga.stamina > self_player_info.player_ga.max_stamina: self_player_info.player_ga.stamina = self_player_info.player_ga.max_stamina
                
                base_text = f"- [{self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ s·ª≠ d·ª•ng **{stamina_potion.item_name}** ƒë·ªÉ h·ªìi **{heal_amount}** Th·ªÉ L·ª±c!"
                
                #X√≥a item kh·ªèi inventory
                ProfileMongoManager.update_list_items_profile(guild_id=self.guild_id, user_id=self_player_info.player_profile.user_id, user_name="", guild_name="",user_display_name="", item = stamina_potion, amount=-1)
                try:
                    self_player_info.player_profile.list_items.remove(stamina_potion)
                except Exception as e: print()
                return base_text
        
        #T√≠nh t·ªâ l·ªá h·ªìi mana n·∫øu mana √≠t h∆°n 30% v√† ph·∫£i c√≥ b√¨nh mana trong kho ƒë·ªì
        if self_player_info.player_profile != None and self_player_info.player_ga.mana < self_player_info.player_ga.max_mana*0.30 and mana_potion != None:
            #roll chance 30% d√πng b√¨nh n·∫øu c√≥ trong inventory c·ªßa profile
            use_chance = UtilitiesFunctions.get_chance(30)
            if use_chance:
                #Tu·ª≥ lo·∫°i b√¨nh m√† h·ªìi theo ph·∫ßn trƒÉm, m·∫∑c ƒë·ªãnh 40%
                percent_restored= 0.4

                heal_amount = int(self_player_info.player_ga.max_mana * percent_restored)
                self_player_info.player_ga.mana += heal_amount
                if self_player_info.player_ga.mana > self_player_info.player_ga.max_mana: self_player_info.player_ga.mana = self_player_info.player_ga.max_mana

                base_text = f"- [{self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ s·ª≠ d·ª•ng **{mana_potion.item_name}** ƒë·ªÉ h·ªìi **{heal_amount}** Mana!"

                #X√≥a item kh·ªèi inventory
                ProfileMongoManager.update_list_items_profile(guild_id=self.guild_id, user_id=self_player_info.player_profile.user_id, user_name="", guild_name="",user_display_name="", item = mana_potion, amount=-1)
                try:
                    self_player_info.player_profile.list_items.remove(mana_potion)
                except Exception as e: print()
                return base_text

        #X·ª≠ l√Ω logic d√πng skill n·∫øu c√≥ skill trong list
        if self_player_info.player_ga.list_skills != None and len(self_player_info.player_ga.list_skills) > 0:
            #∆Øu ti√™n skill passive tr∆∞·ªõc
            base_passive_text_result = self.execute_passive_skill(self_player_info = self_player_info, opponent_alive_attack_info = opponent_alive_attack_info, text_target_profile_exist=text_target_profile_exist, text_own_profile_exist=text_own_profile_exist)
            if base_passive_text_result != None: return base_passive_text_result
            
            #ƒê·∫øn skill t·∫•n c√¥ng
            attack_skill = self.get_random_skill(list_skills=self_player_info.player_ga.list_skills, skill_types=["attack"])
            if attack_skill != None: 
                attack_skill
                #Thi tri·ªÉn k·ªπ nƒÉng
                base_text = self.execute_attack_skill(self_player_info = self_player_info, opponent_alive_attack_info = opponent_alive_attack_info, skill=attack_skill, text_target_profile_exist=text_target_profile_exist, text_own_profile_exist=text_own_profile_exist)
                if base_text != None: return base_text
        
        #T√≠nh t·ªâ l·ªá evasion
        evasion = int(opponent_alive_attack_info.player_ga.stamina/5)
        if evasion > 100: evasion = 85
        opponent_evasion_chance = self.calculate_evasion_chance(current_stamina=opponent_alive_attack_info.player_ga.stamina, max_stamina=opponent_alive_attack_info.player_ga.max_stamina, level=opponent_alive_attack_info.player_ga.level)
        evasion_dice = UtilitiesFunctions.get_chance(opponent_evasion_chance)
        if evasion_dice:
            #Ch·ªâ tr·ª´ stamina c·ªßa lower, t·ªâ l·ªá th·∫•p h∆°n, t·∫ßm 50% c·ªßa info.player_ga.attack_power
            loss_amount = int(self_player_info.player_ga.attack_power * 0.5)
            opponent_alive_attack_info.player_ga.stamina -= loss_amount
            if opponent_alive_attack_info.player_ga.stamina <= 0: opponent_alive_attack_info.player_ga.stamina = 0
            base_text = f"- [{self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ lao ƒë·∫øn ƒë√°nh {opponent_alive_attack_info.player_ga.ga_name} {text_target_profile_exist} nh∆∞ng m·ª•c ti√™u ƒë√£ k·ªãp n√© tr√°nh, v√† ch·ªâ m·∫•t **{loss_amount}** th·ªÉ l·ª±c!"
        else:
            #tr·ª´ m√°u c·ªßa lower
            loss_health = int(self_player_info.player_ga.attack_power + self_player_info.player_ga.attack_power*(self_player_info.player_ga.buff_attack_percent/100))
            opponent_alive_attack_info.player_ga.health -= loss_health
            #tr·ª´ stamina c·ªßa lower, t·ªâ l·ªá th·∫•p h∆°n, t·∫ßm 25% c·ªßa info.player_ga.attack_power
            loss_amount = int(self_player_info.player_ga.attack_power * 0.25)
            opponent_alive_attack_info.player_ga.stamina -= loss_amount
            if opponent_alive_attack_info.player_ga.stamina <= 0: opponent_alive_attack_info.player_ga.stamina = 0
            base_text = f"- [{self_player_info.player_ga.ga_emoji} - **{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ ƒë√°nh tr√∫ng [{opponent_alive_attack_info.player_ga.ga_emoji} - {opponent_alive_attack_info.player_ga.ga_name}] {text_target_profile_exist}! M·ª•c ti√™u m·∫•t **{loss_health}** M√°u v√† **{loss_amount}** Th·ªÉ L·ª±c!"
        
        
        additional_loss_stats_text = ""
        if opponent_alive_attack_info.player_ga.health <= 0:
            opponent_alive_attack_info.player_ga.health = 0
            additional_loss_stats_text += f" M·ª•c ti√™u ƒë√£ b·ªã h·∫° g·ª•c!"
        
        #ƒê·ªÉ ƒë·∫£m b·∫£o stats kh√¥ng b·ªã √¢m        
        if opponent_alive_attack_info.player_ga.health <= 0: opponent_alive_attack_info.player_ga.health = 0
        if opponent_alive_attack_info.player_ga.stamina <= 0: opponent_alive_attack_info.player_ga.stamina = 0
        if opponent_alive_attack_info.player_ga.mana <= 0: opponent_alive_attack_info.player_ga.mana = 0
        
        base_text+= additional_loss_stats_text
        
        return base_text
        
    def calculate_evasion_chance(self, current_stamina, max_stamina, level, max_evasion=85, level_bonus=0.5):
        evasion_chance = ((current_stamina / max_stamina) * max_evasion) + (level * level_bonus)
        return int(min(evasion_chance, max_evasion))

    def get_random_skill(self, list_skills: List["GuardianAngelSkill"], skill_types: List[str] = None, skill_id: str = None):
        #N·∫øu c√≥ skill name th√¨ ∆∞u ti√™n t√¨m xem c√≥ skill name kh√¥ng
        if skill_id != None:
            legit_skills = [skill for skill in list_skills if skill.skill_id == skill_id]
            if len(legit_skills) == 0: return None
            return legit_skills[0]
        #N·∫øu kh√¥ng y√™u c·∫ßu lo·∫°i skill th√¨ random b√¨nh th∆∞·ªùng
        if skill_types == None:
            return random.choice(list_skills)
        else:
            legit_skills = [skill for skill in list_skills if skill.skill_type in skill_types]
            if len(legit_skills) == 0: return None
            return random.choice(legit_skills)
        return None

    def execute_attack_skill(self, self_player_info: GuardianAngelAttackClass, opponent_alive_attack_info: GuardianAngelAttackClass, skill: GuardianAngelSkill, text_target_profile_exist: str, text_own_profile_exist: str):
        base_text = None
        #Mana c·ªßa b·∫£n th√¢n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng mana y√™u c·∫ßu c·ªßa skill
        current_mana_percent = int(self_player_info.player_ga.mana/self_player_info.player_ga.max_mana*100)
        if current_mana_percent >= skill.percent_min_mana_req:
            #roll chance d√πng skill
            use_magic_int = self.calculate_evasion_chance(current_stamina=self_player_info.player_ga.mana, max_stamina=self_player_info.player_ga.max_mana, level=opponent_alive_attack_info.player_ga.level)
            first_chance = UtilitiesFunctions.get_chance(use_magic_int)
            second_chance = UtilitiesFunctions.get_chance(use_magic_int)
            if first_chance == False or second_chance == False: return None #N·∫øu c·∫£ 2 l·∫ßn kh√¥ng tr√∫ng th√¨ kh√¥ng d√πng skill

            #Tu·ª≥ skill m√† tung k·ªπ nƒÉng, v√¨ m·ªôt s·ªë skill t·∫•n c√¥ng c√≥ c√°ch t√≠nh kh√°c
            if skill.skill_id == "skill_black_fire":
                #tr·ª´ m√°u c·ªßa ƒë·ªëi theo attack power c·ªßa profile nh√¢n v·ªõi buff attack percent c·ªßa skill
                loss_health = int(self_player_info.player_ga.attack_power + self_player_info.player_ga.attack_power*(skill.buff_attack_percent/100))
                opponent_alive_attack_info.player_ga.health -= loss_health
                if opponent_alive_attack_info.player_ga.health <= 0: opponent_alive_attack_info.player_ga.health = 0
                
                #chi√™u n√†y t·ªën 45% mana c·ªßa b·∫£n th√¢n
                own_loss_mana = int(self_player_info.player_ga.max_mana * 0.45)
                self_player_info.player_ga.mana -= own_loss_mana
                if self_player_info.player_ga.mana <= 0: self_player_info.player_ga.mana = 0
                
                base_text =  f"- [**{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ khai chi√™u {skill.emoji} - {skill.skill_name} v√† thi√™u ƒë·ªët m·∫•t {loss_health} m√°u c·ªßa [{opponent_alive_attack_info.player_ga.ga_emoji} - {opponent_alive_attack_info.player_ga.ga_name}] {text_target_profile_exist}!"
                return base_text
                
            else: #Nh·ªØng skill c√≤n l·∫°i th√¨ s·∫Ω quy h·∫øt v√†o c√°ch t√≠nh t·ªïng s√°t th∆∞∆°ng b√™n d∆∞·ªõi
                #tr·ª´ m√°u c·ªßa ƒë·ªëi th·ªß theo t·ªâ l·ªá c·ªßa skill
                loss_health = int(skill.attack_power + skill.attack_power*(skill.buff_attack_percent/100))
                opponent_alive_attack_info.player_ga.health -= loss_health
                if opponent_alive_attack_info.player_ga.health <= 0: opponent_alive_attack_info.player_ga.health = 0
                #tr·ª´ mana c·ªßa ƒë·ªëi th·ªß, t·ªâ l·ªá th·∫•p h∆°n, t·∫ßm 25% c·ªßa info.player_ga.attack_power
                loss_mana = int(self_player_info.player_ga.attack_power * 0.25)
                opponent_alive_attack_info.player_ga.mana -= loss_mana
                if opponent_alive_attack_info.player_ga.mana <= 0: opponent_alive_attack_info.player_ga.mana = 0
                
                #tr·ª´ mana c·ªßa ng∆∞·ªùi d√πng theo t·ªâ l·ªá skill
                loss_own_mana = int(self_player_info.player_ga.max_mana * (skill.mana_loss/100)) - skill.attack_power #Kh√¥ng h·∫≥n l√† tr·ª´ qu√° nhi·ªÅu, v√¨ th∆∞·ªùng magic s·∫Ω m·∫°nh h∆°n, n√™n buff m·ªôt t√Ω cho ch·∫Øc. ƒê·ªÉ balance sau
                if loss_own_mana <= 10: loss_own_mana = 20
                self_player_info.player_ga.mana -= loss_own_mana
                
                base_text =  f"- [**{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ d√πng chi√™u {skill.skill_name} v√† ƒë√°nh bay {loss_health} m√°u v√† {loss_mana} Mana c·ªßa [{opponent_alive_attack_info.player_ga.ga_emoji} - {opponent_alive_attack_info.player_ga.ga_name}] {text_target_profile_exist}!"
        return base_text
    
    def execute_passive_skill(self, self_player_info: GuardianAngelAttackClass, opponent_alive_attack_info: GuardianAngelAttackClass, text_target_profile_exist: str, text_own_profile_exist: str):
        base_text = None
        
        current_mana_percent = int(self_player_info.player_ga.mana/self_player_info.player_ga.max_mana*100)
        skill = self.get_random_skill(list_skills=self_player_info.player_ga.list_skills, skill_id="summoning_skill")
        if skill != None and current_mana_percent >= 50:
            #Skill n√†y s·∫Ω tri·ªáu h·ªìi m·ªôt NPC v√†o phe c·ªßa 
            is_upper = False
            if self_player_info in self.upper_attack_class:
                is_upper = True
            
            #D·ª±a v√†o is_upper ƒë·ªÉ x√°c ƒë·ªãnh phe n√†o s·∫Ω tri·ªáu h·ªìi NPC
            #N·∫øu phe ƒë√≥ t·ªïng GuardianAngelAttackClass d∆∞·ªõi ba m·ªõi ƒë∆∞·ª£c tri·ªáu h·ªìi
            if is_upper:
                if len(self.upper_attack_class) < 3:
                    #T·∫°o NPC
                    calculated_level= int(self_player_info.player_ga.level/2)
                    roll_chance_legendary = UtilitiesFunctions.get_chance(5)
                    if roll_chance_legendary: calculated_level = self_player_info.player_ga.level*2
                    if calculated_level < 1: calculated_level = 1
                    enemy: GuardianAngel = ListGAAndSkills.get_random_ga_enemy_generic(level=calculated_level)
                    new_enemy = GuardianAngelAttackClass(player_profile=None, player_ga=enemy, starting_at_round=self.round)
                    if is_upper:
                        #Add v√†o phe attack upper
                        self.upper_attack_class.append(new_enemy)
                    else:
                        #Add v√†o phe attack lower
                        self.lower_attack_class.append(new_enemy)
                    #Tr·ª´ 50% mana c·ªßa b·∫£n th√¢n
                    own_loss_mana = int(self_player_info.player_ga.max_mana * 0.50)
                    self_player_info.player_ga.mana -= own_loss_mana
                    if self_player_info.player_ga.mana <= 0: self_player_info.player_ga.mana = 0
                    
                    base_text =  f"- [**{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ d√πng chi√™u {skill.emoji} - {skill.skill_name} ƒë·ªÉ tri·ªáu h·ªìi **{enemy.ga_emoji} - {enemy.ga_name}** l√™n gia nh·∫≠p ƒë·ªôi!"
                    return base_text
            else:
                if len(self.lower_attack_class) < 3:
                    #T·∫°o NPC
                    calculated_level= int(self_player_info.player_ga.level/2)
                    roll_chance_legendary = UtilitiesFunctions.get_chance(10)
                    if roll_chance_legendary: calculated_level = self_player_info.player_ga.level*3
                    if calculated_level < 1: calculated_level = 1
                    enemy: GuardianAngel = ListGAAndSkills.get_random_ga_enemy_generic(level=calculated_level)
                    new_enemy = GuardianAngelAttackClass(player_profile=None, player_ga=enemy, starting_at_round=self.round)
                    if is_upper:
                        #Add v√†o phe attack upper
                        self.upper_attack_class.append(new_enemy)
                    else:
                        #Add v√†o phe attack lower
                        self.lower_attack_class.append(new_enemy)
                    #Tr·ª´ 50% mana c·ªßa b·∫£n th√¢n
                    own_loss_mana = int(self_player_info.player_ga.max_mana * 0.50)
                    self_player_info.player_ga.mana -= own_loss_mana
                    if self_player_info.player_ga.mana <= 0: self_player_info.player_ga.mana = 0
                    
                    base_text =  f"- [**{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ d√πng chi√™u {skill.emoji} - {skill.skill_name} ƒë·ªÉ tri·ªáu h·ªìi **{enemy.ga_emoji} - {enemy.ga_name}** l√™n gia nh·∫≠p ƒë·ªôi!"
                    return base_text
        
        #Khi m√°u d∆∞·ªõi 15% th√¨ k√≠ch ho·∫°t chi√™u ch·∫°y tr·ªën n·∫øu c√≥
        current_health_percent = int(self_player_info.player_ga.health/self_player_info.player_ga.max_health*100)
        if current_health_percent <= 15:
            skill = self.get_random_skill(list_skills=self_player_info.player_ga.list_skills, skill_id="skill_run_away")
            if skill != None:
                #D√πng skill n√†y s·∫Ω remove ra kh·ªèi list list attack class ngay l·∫≠p t·ª©c, t·ªën t·∫•t c·∫£ mana v√† stamina
                ProfileMongoManager.set_guardian_current_stats(guild_id=self.guild_id, user_id=self_player_info.player_profile.user_id,stamina=0, health=self_player_info.player_ga.health, mana=0)
                #Ki·ªÉm tra trong upper hay lower
                if self_player_info in self.upper_attack_class:
                    self.upper_attack_class.remove(self_player_info)
                if self_player_info in self.lower_attack_class:
                    self.lower_attack_class.remove(self_player_info)
                base_text =  f"- [**{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} c·∫£m th·∫•y kh√¥ng ·ªïn v·ªõi tr·∫≠n chi·∫øn, v√† ƒë√£ d√πng chi√™u {skill.emoji} -{skill.skill_name} ƒë·ªÉ s·ªßi ngay l·∫≠p t·ª©c!"
                return base_text
        
        if current_health_percent <= 25 and self_player_info.is_used_skill_critical_strike == False:
            skill = self.get_random_skill(list_skills=self_player_info.player_ga.list_skills, skill_id="skill_critical_strike")
            if skill != None:
                #D√πng skill n√†y s·∫Ω l·∫≠p t·ª©c tƒÉng 25% s·ª©c t·∫•n c√¥ng cho user
                self_player_info.player_ga.attack_power += int(self_player_info.player_ga.attack_power * 0.25)
                self_player_info.is_used_skill_critical_strike = True
                base_text =  f"- [**{self_player_info.player_ga.ga_name}]** {text_own_profile_exist} ƒë√£ d√πng chi√™u {skill.emoji} - {skill.skill_name} v√† ho√° r·ªì ƒë·ªÉ tƒÉng 25% s·ª©c m·∫°nh t·∫•n c√¥ng c·ªßa b·∫£n th√¢n!"
                return base_text
        
        
            
        
        