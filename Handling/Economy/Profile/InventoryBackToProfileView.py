import discord
from Handling.Economy.Profile.ProfileClass import Profile
import Handling.Economy.Profile.ProfileMongoManager as ProfileMongoManager
from CustomEnum.SlashEnum import SlashCommand
from CustomEnum.EmojiEnum import EmojiCreation2
from typing import List, Optional, Dict
from Handling.Economy.Inventory_Shop.ItemClass import Item, list_gift_items
from Handling.Misc.UtilitiesFunctionsEconomy import UtilitiesFunctions
import Handling.Economy.GA.ListGAAndSkills as ListGAAndSkills
from datetime import datetime, timedelta
import random
import Handling.Economy.Couple.CoupleMongoManager as CoupleMongoManager

class ProfileToInventoryView(discord.ui.View):
    def __init__(self, profile: Profile):
        super().__init__(timeout=30)
        self.message: discord.Message = None
        self.profile = profile
        
        if profile.list_items != None and len(profile.list_items)>0:
            self.profile_button = discord.ui.Button(label="Kho ƒê·ªì", style=discord.ButtonStyle.primary)
            self.profile_button.callback = self.inventory_button_function
            self.add_item(self.profile_button)
        if profile.plant != None:
            self.gard_button = discord.ui.Button(label="Khu V∆∞·ªùn", style=discord.ButtonStyle.primary)
            self.gard_button.callback = self.garden_button_function
            self.add_item(self.gard_button)
        
        if profile.guardian != None:
            self.guardian_button = discord.ui.Button(label="H·ªô V·ªá Th·∫ßn", style=discord.ButtonStyle.primary)
            self.guardian_button.callback = self.guardian_button_function
            self.add_item(self.guardian_button)
        
        
    # @discord.ui.button(label="Kho ƒê·ªì", style=discord.ButtonStyle.primary)
    async def inventory_button_function(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        embed = discord.Embed(title=f"", description=f"**Kho ƒë·ªì c·ªßa <@{self.profile.user_id}>**", color=0xddede7)
        embed.add_field(name=f"S·ªë l∆∞·ª£ng v·∫≠t ph·∫©m: {len(self.profile.list_items)}", value=f"", inline=True)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        for item in self.profile.list_items:
            embed.add_field(name=f"", value=f"{item.emoji} - {item.item_name} (x{item.quantity})", inline=True)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.set_footer(text=f"ƒê·ª´ng qu√™n, b·∫°n ch·ªâ ƒë∆∞·ª£c gi·ªØ t·ªëi ƒëa 20 v·∫≠t ph·∫©m, m·ªói lo·∫°i v·∫≠t ph·∫©m ch·ªâ t·ªëi ƒëa 99 c√°i th√¥i nh√©!", icon_url="https://cdn.discordapp.com/icons/1256987900277690470/9e8749a5a47cae53211484d7aee42040.webp?size=100&quot")
        view = InventoryBackToProfileView(profile=self.profile)
        m = await self.message.edit(embed=embed, view = view)
        view.message = m
        await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang ch·∫ø ƒë·ªô Kho ƒê·ªì!", ephemeral=True)
    
    async def garden_button_function(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        time_window = timedelta(hours=self.profile.plant.hour_require)
        next_time = self.profile.plant.plant_date + time_window
        unix_time = int(next_time.timestamp())
        embed = discord.Embed(title="", description=f"**V∆∞·ªùn nh√† c·ªßa <@{self.profile.user_id}>**", color=0xddede7)
        embed.add_field(name=f"", value=f"Th√¥ng tin c√¢y tr·ªìng", inline=True)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f"H·∫°t gi·ªëng ƒëang tr·ªìng: [{self.profile.plant.source_item.emoji} - **{self.profile.plant.source_item.item_name}**]", inline=False)
        embed.add_field(name=f"", value=f"Ti·∫øn tr√¨nh:", inline=False)
        embed.add_field(name=f"", value=f"{UtilitiesFunctions.progress_bar_plant(start_time=self.profile.plant.plant_date, end_time=next_time)}", inline=False)
        embed.add_field(name=f"", value=f"Th·ªùi gian thu ho·∫°ch: <t:{unix_time}:t>", inline=False)
        embed.add_field(name=f"", value=f"S·∫Ω thu ho·∫°ch ƒë∆∞·ª£c:", inline=False)
        embed.add_field(name=f"", value=f"{EmojiCreation2.SHINY_POINT.value} [{self.profile.plant.des_item.emoji} - **{self.profile.plant.des_item.item_name}**]", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        view = InventoryBackToProfileView(profile=self.profile)
        m = await self.message.edit(embed=embed, view = view)
        view.message = m
        await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang Khu V∆∞·ªùn!", ephemeral=True)

    async def guardian_button_function(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        embed = discord.Embed(title="", description=f"**Th√¥ng tin H·ªô V·ªá Th·∫ßn c·ªßa <@{self.profile.user_id}>**", color=0xddede7)
        
        text_name = f"{self.profile.guardian.ga_emoji} - **{self.profile.guardian.ga_name}**"
        if self.profile.guardian.time_to_recover != None and self.profile.guardian.time_to_recover > datetime.now():
            next_time = self.profile.guardian.time_to_recover
            unix_time = int(next_time.timestamp())
            text_name += f" (Tr·ªçng th∆∞∆°ng ƒë·∫øn <t:{unix_time}:t>)"
        
        embed.add_field(name=f"", value=text_name, inline=False)
        if self.profile.guardian.stats_point > 0:
            embed.add_field(name=f"", value=f"C√≥ **{self.profile.guardian.stats_point}** ƒëi·ªÉm c·ªông ({SlashCommand.GA_RANKUP.value})", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f">>> **S·ª©c t·∫•n c√¥ng** \nü¶æ: **{self.profile.guardian.attack_power}**", inline=False)
        embed.add_field(name=f"", value=f">>> **M√°u** \n{EmojiCreation2.HP.value}: {self.profile.guardian.health}/{self.profile.guardian.max_health}", inline=False)
        embed.add_field(name=f"", value=f">>> **Mana** \n{EmojiCreation2.MP.value}: {self.profile.guardian.mana}/{self.profile.guardian.max_mana}", inline=False)
        embed.add_field(name=f"", value=f">>> **Th·ªÉ l·ª±c** \n{EmojiCreation2.STAMINA.value}: {self.profile.guardian.stamina}/{self.profile.guardian.max_stamina}", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f"C·∫•p b·∫≠c: **{UtilitiesFunctions.get_text_on_guardian_level(self.profile.guardian.level)}** [{self.profile.guardian.level}]", inline=False)
        bar_progress = UtilitiesFunctions.progress_bar(input_value= self.profile.guardian.level_progressing)
        embed.add_field(name=f"", value=f"{bar_progress}\n", inline=False)
        if self.profile.guardian.list_skills != None and len(self.profile.guardian.list_skills)>0:
            count = 0
            embed.add_field(name=f"", value=f"ƒêang s·ªü h·ªØu **{len(self.profile.guardian.list_skills)}** k·ªπ nƒÉng [{len(self.profile.guardian.list_skills)}/{self.profile.guardian.max_skills}]", inline=False)
            for skill in self.profile.guardian.list_skills:
                embed.add_field(name=f"", value=f"[{skill.emoji} - **{skill.skill_name}**]", inline=True)
                count += 1
                if count > 6:
                    embed.add_field(name=f"", value=f"\nNgo√†i ra c√≤n nhi·ªÅu k·ªπ nƒÉng kh√°c!", inline=False)
                    break
        embed.set_footer(text=f"ƒê·ª´ng qu√™n, m·ªçi H·ªô V·ªá Th·∫ßn ƒë·ªÅu c√≥ t·ªâ l·ªá ch·∫øt vƒ©nh vi·ªÖn n·∫øu tr·ªçng th∆∞∆°ng nh√©!", icon_url="https://cdn.discordapp.com/icons/1256987900277690470/9e8749a5a47cae53211484d7aee42040.webp?size=100&quot")
        view = InventoryBackToProfileView(profile=self.profile)
        try:
            #G·∫Øn link background d·ª±a tr√™n id c·ªßa guardian n·∫øu c√≥
            urls = ListGAAndSkills.get_list_back_ground_on_ga_id(self.profile.guardian.ga_id)
            if urls != None and len(urls)>0:
                url = random.choice(urls)
                embed.set_image(url=url)
            m = await self.message.edit(embed=embed, view = view)
            view.message = m
            await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang H·ªô V·ªá Th·∫ßn!", ephemeral=True)
        except Exception:
            embed.set_image(url=None)
            m = await self.message.edit(embed=embed, view=view)
            view.message = m
            await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang H·ªô V·ªá Th·∫ßn!", ephemeral=True)
            return

    
    
    async def on_timeout(self):
        #Delete
        if self.message != None: 
            #Disable
            for item in self.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True
                if isinstance(item, discord.ui.Select):
                    item.disabled = True
            try:
                await self.message.edit(view=None)
            except Exception:
                return
        
class InventoryBackToProfileView(discord.ui.View):
    def __init__(self, profile: Profile):
        super().__init__(timeout=30)
        self.message: discord.Message = None
        self.profile = profile
    
    async def on_timeout(self):
        #Delete
        if self.message != None: 
            #Disable
            for item in self.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True
                if isinstance(item, discord.ui.Select):
                    item.disabled = True
            try:
                await self.message.edit(view=None)
            except Exception:
                return
    
    @discord.ui.button(label="Profile", style=discord.ButtonStyle.primary)
    async def profile_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer(ephemeral=True)
        if self.profile.is_authority and ProfileMongoManager.is_in_debt(data = self.profile, copper_threshold=100000):
            embed = discord.Embed(title=f"", description=f"Ch√≠nh Quy·ªÅn ƒë√£ n·ª£ n·∫ßn qu√° nhi·ªÅu v√† t·ª± s·ª•p ƒë·ªï. H√£y d√πng l·ªánh {SlashCommand.VOTE_AUTHORITY.value} ƒë·ªÉ b·∫ßu Ch√≠nh Quy·ªÅn m·ªõi!", color=0xddede7)
            self.profile.copper = -10000
            self.profile.silver = 0
            self.profile.gold = 0
            self.profile.darkium = 0
            ProfileMongoManager.update_profile_money_fast(guild_id= interaction.guild_id, data=self.profile)
            ProfileMongoManager.remove_authority_from_server(guild_id=interaction.guild_id)
            ProfileMongoManager.update_last_authority(guild_id=interaction.guild_id, user_id=self.profile.user_id)
            await self.message.edit(embed=embed)
            await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang ch·∫ø ƒë·ªô Profile!", ephemeral=True)
            return
        
        couple_info = CoupleMongoManager.find_couple_by_id(guild_id=interaction.guild_id, user_id=self.profile.user_id)
        
        cq = ""
        if self.profile.is_authority:
            cq = "Ch√≠nh Quy·ªÅn T·ªëi Cao"
        embed = discord.Embed(title=cq, description=f"**Profile <@{self.profile.user_id}>**", color=0xddede7)
        if self.profile.protection_item != None:
            embed.add_field(name=f"", value=f"B·∫£o H·ªô V·∫≠t: [{self.profile.protection_item.emoji} - **{self.profile.protection_item.item_name}**]", inline=False)
        if self.profile.attack_item != None:
            embed.add_field(name=f"", value=f"V≈© Kh√≠: [{self.profile.attack_item.emoji} - **{self.profile.attack_item.item_name}**]", inline=False)
        embed.add_field(name=f"", value=f"Nh√¢n ph·∫©m: **{UtilitiesFunctions.get_nhan_pham(self.profile.dignity_point)}** ({self.profile.dignity_point})", inline=True)
        embed.add_field(name=f"", value=f"ƒê·ªãa V·ªã: **{UtilitiesFunctions.get_dia_vi(self.profile)}**", inline=True)
        embed.add_field(name=f"", value=f"Rank: **{self.profile.level}**", inline=False)
        bar_progress = self.progress_bar(input_value= self.profile.level_progressing)
        embed.add_field(name=f"", value=f"{bar_progress}\n", inline=False)
        if couple_info!= None:
            embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
            embed.add_field(name=f"", value=f"T√¨nh tr·∫°ng c·∫∑p ƒë√¥i: **{UtilitiesFunctions.get_text_on_love_rank(couple_info.love_rank)}** (**{couple_info.love_rank}**)", inline=False)
            embed.add_field(name=f"", value=f"<@{couple_info.first_user_id}> -`{UtilitiesFunctions.get_heart_emoji_on_rank(couple_info.love_rank)}¬¥- <@{couple_info.second_user_id}>", inline=False)
            embed.add_field(name=f"", value=f"ƒêi·ªÉm th√¢n m·∫≠t: **{couple_info.love_point}**", inline=False)
            embed.add_field(name=f"", value=f"T·ªâ l·ªá thƒÉng hoa c·∫£m x√∫c: **{int(couple_info.love_progressing/1000*100)}%**", inline=False)
            date_created = couple_info.date_created
            unix_time = int(date_created.timestamp())
            embed.add_field(name=f"", value=f"Ng√†y ƒë·∫ßu quen nhau: <t:{unix_time}:D>", inline=False)
            if couple_info.date_married != None:
                date_married = couple_info.date_married
                unix_time_m = int(date_married.timestamp())
                embed.add_field(name=f"", value=f"Ng√†y c∆∞·ªõi nhau: <t:{unix_time_m}:D>", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f"**T·ªïng t√†i s·∫£n**:", inline=False)
        show_darkium = f"{EmojiCreation2.DARKIUM.value}: **{UtilitiesFunctions.shortened_currency(self.profile.darkium)}**\n"
        if self.profile.darkium == 0:
            show_darkium = ""
        embed.add_field(name=f"", value=f">>> {show_darkium}{EmojiCreation2.GOLD.value}: **{UtilitiesFunctions.shortened_currency(self.profile.gold)}**\n{EmojiCreation2.SILVER.value}: **{UtilitiesFunctions.shortened_currency(self.profile.silver)}**\n{EmojiCreation2.COPPER.value}: **{UtilitiesFunctions.shortened_currency(self.profile.copper)}**", inline=False)
        #Quote
        embed.add_field(name=f"", value="\n", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f"**Quote**: \"{self.profile.quote}\"", inline=False)
        embed.set_footer(text=f"Profile c·ªßa {self.profile.user_name}.", icon_url="https://cdn.discordapp.com/icons/1256987900277690470/9e8749a5a47cae53211484d7aee42040.webp?size=100&quot")
        await self.message.edit(embed=embed, view = None)
        await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang ch·∫ø ƒë·ªô Profile!", ephemeral=True)
        
    
    def progress_bar(self, input_value: int, total_progress: int = 1000, bar_length=15):
        # Calculate the percentage of progress
        percentage = (input_value / total_progress) * 100
        # Determine the number of filled (‚ñà) characters
        filled_length = int(bar_length * input_value // total_progress)
        # Create the progress bar string
        bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
        # Format the output with percentage
        return f'{bar} **{int(percentage)}%**'
