import discord
from Handling.Economy.Global import GlobalMongoManager
from Handling.Economy.Profile.GuardianMemoryView import GuardianMemoryView
from Handling.Economy.Profile.ProfileClass import Profile
import Handling.Economy.Profile.ProfileMongoManager as ProfileMongoManager
from CustomEnum.SlashEnum import SlashCommand
from CustomEnum.EmojiEnum import EmojiCreation2
from typing import List, Optional, Dict
from Handling.Economy.Inventory_Shop.ItemClass import Item, list_gift_items
from Handling.Economy.Profile.SpecialInventoryGlobalView import SpecialInventoryGlobalView
from Handling.Misc.UtilitiesFunctionsEconomy import UtilitiesFunctions
import Handling.Economy.GA.ListGAAndSkills as ListGAAndSkills
from datetime import datetime, timedelta
import random
import Handling.Economy.Couple.CoupleMongoManager as CoupleMongoManager

class ProfileAdditionalView(discord.ui.View):
    def __init__(self, profile: Profile, profile_embed: discord.Embed = None):
        super().__init__(timeout=30)
        self.message: discord.Message = None
        self.profile = profile
        self.profile_embed = profile_embed
        
        if profile.list_items != None and len(profile.list_items)>0:
            self.inventory_button = discord.ui.Button(label="Kho ƒê·ªì", style=discord.ButtonStyle.primary)
            self.inventory_button.callback = self.inventory_button_function
            self.add_item(self.inventory_button)
            
        if profile.plant != None:
            self.gard_button = discord.ui.Button(label="Khu V∆∞·ªùn", style=discord.ButtonStyle.primary)
            self.gard_button.callback = self.garden_button_function
            self.add_item(self.gard_button)
        
        if profile.guardian != None:
            self.guardian_button = discord.ui.Button(label="H·ªô V·ªá Th·∫ßn", style=discord.ButtonStyle.primary)
            self.guardian_button.callback = self.guardian_button_function
            self.add_item(self.guardian_button)
        
        
    # @discord.ui.button(label="Kho ƒê·ªì", style=discord.ButtonStyle.primary)
    async def inventory_button_function(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        embed_color = 0xffffff
        if isinstance(self.profile.profile_color, int) and 0x000000 <= self.profile.profile_color <= 0xFFFFFF:
            embed_color = self.profile.profile_color
        embed = discord.Embed(title=f"", description=f"**Kho ƒë·ªì c·ªßa <@{self.profile.user_id}>**", color=embed_color)
        embed.add_field(name=f"S·ªë l∆∞·ª£ng v·∫≠t ph·∫©m: {len(self.profile.list_items)}", value=f"", inline=True)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        for item in self.profile.list_items:
            embed.add_field(name=f"", value=f"{item.emoji} - {item.item_name} (x{item.quantity})", inline=True)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.set_footer(text=f"ƒê·ª´ng qu√™n, b·∫°n ch·ªâ ƒë∆∞·ª£c gi·ªØ t·ªëi ƒëa 20 v·∫≠t ph·∫©m, m·ªói lo·∫°i v·∫≠t ph·∫©m ch·ªâ t·ªëi ƒëa 99 c√°i th√¥i nh√©!", icon_url=f"{EmojiCreation2.TRUE_HEAVEN_LINK_MINI.value}")
        view = BackToProfileView(profile=self.profile, profile_embed=self.profile_embed)
        
        global_inventory = GlobalMongoManager.find_global_item_by_id(user_id=interaction.user.id)
        if global_inventory:
            view = SpecialInventoryGlobalView(profile=self.profile, global_inventory=global_inventory, profile_embed=self.profile_embed)
        m = await self.message.edit(embed=embed, view = view)
        view.message = m
        await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang ch·∫ø ƒë·ªô Kho ƒê·ªì!", ephemeral=True)
    
    async def garden_button_function(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        time_window = timedelta(hours=self.profile.plant.hour_require)
        next_time = self.profile.plant.plant_date + time_window
        unix_time = int(next_time.timestamp())
        embed_color = 0xffffff
        if isinstance(self.profile.profile_color, int) and 0x000000 <= self.profile.profile_color <= 0xFFFFFF:
            embed_color = self.profile.profile_color
        embed = discord.Embed(title="", description=f"**V∆∞·ªùn nh√† c·ªßa <@{self.profile.user_id}>**", color=embed_color)
        embed.add_field(name=f"", value=f"Th√¥ng tin c√¢y tr·ªìng", inline=True)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f"H·∫°t gi·ªëng ƒëang tr·ªìng: [{self.profile.plant.source_item.emoji} - **{self.profile.plant.source_item.item_name}**]", inline=False)
        embed.add_field(name=f"", value=f"Ti·∫øn tr√¨nh:", inline=False)
        embed.add_field(name=f"", value=f"{UtilitiesFunctions.progress_bar_plant(start_time=self.profile.plant.plant_date, end_time=next_time)}", inline=False)
        embed.add_field(name=f"", value=f"Th·ªùi gian thu ho·∫°ch: <t:{unix_time}:t>", inline=False)
        embed.add_field(name=f"", value=f"S·∫Ω thu ho·∫°ch ƒë∆∞·ª£c:", inline=False)
        embed.add_field(name=f"", value=f"{EmojiCreation2.SHINY_POINT.value} [{self.profile.plant.des_item.emoji} - **{self.profile.plant.des_item.item_name}**]", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        view = BackToProfileView(profile=self.profile, profile_embed=self.profile_embed)
        m = await self.message.edit(embed=embed, view = view)
        view.message = m
        await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang Khu V∆∞·ªùn!", ephemeral=True)

    async def guardian_button_function(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        embed_color = 0xffffff
        if isinstance(self.profile.profile_color, int) and 0x000000 <= self.profile.profile_color <= 0xFFFFFF:
            embed_color = self.profile.profile_color
        embed = discord.Embed(title="", description=f"**Th√¥ng tin H·ªô V·ªá Th·∫ßn c·ªßa <@{self.profile.user_id}>**", color=embed_color)
        text_name = f"{self.profile.guardian.ga_emoji} - **{self.profile.guardian.ga_name}**"
        if self.profile.guardian.time_to_recover != None and self.profile.guardian.time_to_recover > datetime.now() and self.profile.guardian.is_dead == False:
            next_time = self.profile.guardian.time_to_recover
            unix_time = int(next_time.timestamp())
            text_name += f" (Tr·ªçng th∆∞∆°ng ƒë·∫øn <t:{unix_time}:t>)"
        if self.profile.guardian.is_dead == True:
            text_name += f"\n(ƒê√£ **t·ª≠ n·∫°n**. H·ªìi sinh b·∫±ng Ph·ª•c Sinh Th·∫°ch trong {SlashCommand.SHOP_GLOBAL.value} ho·∫∑c b√°n ƒëi ƒë·ªÉ mua H·ªô V·ªá Th·∫ßn m·ªõi)"
        embed.add_field(name=f"", value=text_name, inline=False)
        if self.profile.guardian.stats_point > 0:
            embed.add_field(name=f"", value=f"C√≥ **{self.profile.guardian.stats_point}** ƒëi·ªÉm c·ªông ({SlashCommand.GA_RANKUP.value})", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f">>> **S·ª©c t·∫•n c√¥ng** \nü¶æ: **{self.profile.guardian.attack_power}**", inline=False)
        embed.add_field(name=f"", value=f">>> **M√°u** \n{EmojiCreation2.HP.value}: {self.profile.guardian.health}/{self.profile.guardian.max_health}", inline=False)
        embed.add_field(name=f"", value=f">>> **Th·ªÉ l·ª±c** \n{EmojiCreation2.STAMINA.value}: {self.profile.guardian.stamina}/{self.profile.guardian.max_stamina}", inline=False)
        embed.add_field(name=f"", value=f">>> **Mana** \n{EmojiCreation2.MP.value}: {self.profile.guardian.mana}/{self.profile.guardian.max_mana}", inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.add_field(name=f"", value=f"C·∫•p b·∫≠c: **{UtilitiesFunctions.get_text_on_guardian_level(self.profile.guardian.level)}** [{self.profile.guardian.level}]", inline=False)
        bar_progress = UtilitiesFunctions.progress_bar(input_value= self.profile.guardian.level_progressing)
        embed.add_field(name=f"", value=f"{bar_progress}\n", inline=False)
        if self.profile.guardian.list_skills != None and len(self.profile.guardian.list_skills)>0:
            count = 0
            embed.add_field(name=f"", value=f"ƒêang s·ªü h·ªØu **{len(self.profile.guardian.list_skills)}** k·ªπ nƒÉng [{len(self.profile.guardian.list_skills)}/{self.profile.guardian.max_skills}]", inline=False)
            for skill in self.profile.guardian.list_skills:
                embed.add_field(name=f"", value=f"[{skill.emoji} - **{skill.skill_name}**]", inline=True)
                count += 1
                if count > 6:
                    embed.add_field(name=f"", value=f"\nNgo√†i ra c√≤n nhi·ªÅu k·ªπ nƒÉng kh√°c!", inline=False)
                    break
        embed.set_footer(text=f"ƒê·ª´ng qu√™n, n·∫øu c√≥ th·∫Øc m·∫Øc v·ªÅ H·ªô V·ªá Th·∫ßn th√¨ c·ª© nh·∫Øn c√¢u\nga help", icon_url=f"{EmojiCreation2.TRUE_HEAVEN_LINK_MINI.value}")
        view = SpecialGuardianView(profile=self.profile, profile_embed=self.profile_embed)
        try:
            #G·∫Øn link background d·ª±a tr√™n id c·ªßa guardian n·∫øu c√≥
            urls = ListGAAndSkills.get_list_back_ground_on_ga_id(self.profile.guardian.ga_id)
            if urls != None and len(urls)>0:
                url = random.choice(urls)
                embed.set_image(url=url)
            m = await self.message.edit(embed=embed, view = view)
            view.message = m
            await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang H·ªô V·ªá Th·∫ßn!", ephemeral=True)
        except Exception:
            embed.set_image(url=None)
            m = await self.message.edit(embed=embed, view=view)
            view.message = m
            await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang H·ªô V·ªá Th·∫ßn!", ephemeral=True)
            return

    
    
    async def on_timeout(self):
        #Delete
        if self.message != None: 
            #Disable
            for item in self.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True
                if isinstance(item, discord.ui.Select):
                    item.disabled = True
            try:
                await self.message.edit(view=None)
            except Exception:
                return
        
class BackToProfileView(discord.ui.View):
    def __init__(self, profile: Profile, profile_embed: discord.Embed = None):
        super().__init__(timeout=30)
        self.message: discord.Message = None
        self.profile = profile
        self.profile_embed = profile_embed
    
    async def on_timeout(self):
        #Delete
        if self.message != None: 
            #Disable
            for item in self.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True
                if isinstance(item, discord.ui.Select):
                    item.disabled = True
            try:
                await self.message.edit(view=None)
            except Exception:
                return
    
    @discord.ui.button(label="Profile", style=discord.ButtonStyle.primary)
    async def profile_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.profile_embed != None:
            #Chuy·ªÉn v·ªÅ embed c≈©
            await self.message.edit(embed=self.profile_embed, view = None)
            return

class SpecialGuardianView(discord.ui.View):
    def __init__(self, profile: Profile, profile_embed: discord.Embed = None):
        super().__init__(timeout=30)
        self.message: discord.Message = None
        self.profile = profile
        self.profile_embed = profile_embed
    
    async def on_timeout(self):
        #Delete
        if self.message != None: 
            #Disable
            for item in self.children:
                if isinstance(item, discord.ui.Button):
                    item.disabled = True
                if isinstance(item, discord.ui.Select):
                    item.disabled = True
            try:
                await self.message.edit(view=None)
            except Exception:
                return
    
    @discord.ui.button(label="Profile", style=discord.ButtonStyle.primary)
    async def profile_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.profile_embed != None:
            #Chuy·ªÉn v·ªÅ embed c≈©
            await self.message.edit(embed=self.profile_embed, view = None)
            return

    @discord.ui.button(label="K√Ω ·ª®c H·ªô V·ªá Th·∫ßn", style=discord.ButtonStyle.blurple)
    async def memories_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer(ephemeral=True)
        page_size = 4
        list_data = self.profile.guardian.memories if self.profile.guardian.memories else []
        self.pages = [list_data[i:i+page_size] for i in range(0, len(list_data), page_size)]
        current_page = 0
        total_pages = len(self.pages) if len(self.pages) > 0 else 1
        embed_color = 0xffffff
        if isinstance(self.profile.profile_color, int) and 0x000000 <= self.profile.profile_color <= 0xFFFFFF:
            embed_color = self.profile.profile_color
        embed = discord.Embed(title="", description=f"**K√Ω ·ª©c H·ªô V·ªá Th·∫ßn c·ªßa <@{self.profile.user_id}>**", color=embed_color)
        text_name = f"{self.profile.guardian.ga_emoji} - **{self.profile.guardian.ga_name}**"
        embed.add_field(name=f"", value= text_name, inline=False)
        #Stats count
        text_stats = f"Tr·ªçng th∆∞∆°ng: **{self.profile.guardian.count_injury}** - T·ª≠ n·∫°n: **{self.profile.guardian.count_death}**"
        embed.add_field(name=f"", value= text_stats, inline=False)
        text_stats = f"PVE th·∫Øng: **{self.profile.guardian.count_battle_pve_won}** - PVE thua: **{self.profile.guardian.count_battle_pve_lose}**"
        embed.add_field(name=f"", value= text_stats, inline=False)
        text_stats = f"PVP th·∫Øng: **{self.profile.guardian.count_battle_pvp_won}** - PVP thua: **{self.profile.guardian.count_battle_pvp_lose}**"
        embed.add_field(name=f"", value= text_stats, inline=False)
        text_stats = f"H·∫ßm ng·ª•c th·∫Øng: **{self.profile.guardian.count_dungeon_fight_won}** - H·∫ßm ng·ª•c thua: **{self.profile.guardian.count_dungeon_fight_lose}**"
        embed.add_field(name=f"", value= text_stats, inline=False)
        text_stats = f"ƒÇn: **{self.profile.guardian.count_feed}** - Thi·ªÅn ƒë·ªãnh: **{self.profile.guardian.count_meditation}**"
        embed.add_field(name=f"", value= text_stats, inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        page_data = self.pages[current_page] if self.pages else []
        if not page_data:
            embed.add_field(name=f"", value="Kh√¥ng c√≥ d·ªØ li·ªáu k√Ω ·ª©c", inline=False)
        else:
            for idx, data in enumerate(page_data, start=1 + current_page * page_size):
                # Convert data.date to Discord unix time format if possible
                unix_time = int(data.date.timestamp())
                date_display = f"<t:{unix_time}:f>"
                text = f"{EmojiCreation2.SHINY_POINT.value} {data.description}\n\n"
                embed.add_field(name=f"#*{data.channel_name}* - {date_display}", value=text, inline=False)
        embed.add_field(name=f"", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê>", inline=False)
        embed.set_footer(text=f"Trang 1/{total_pages}")
        view = GuardianMemoryView(profile=self.profile, list_data=list_data)
        m = await self.message.edit(embed=embed, view=view)
        view.message = m
        await interaction.followup.send(f"B·∫°n ƒë√£ chuy·ªÉn sang K√Ω ·ª®c H·ªô V·ªá Th·∫ßn!", ephemeral=True)
        return
            